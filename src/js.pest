// The entire ECMAScript language as a Parser Expression Grammar
// Parser rules which share a name with ECMA-262 productions are intended to match the same language
//(though not necessarily with the same derivation).
whitespace = _{ S }
Program = {
    soi ~ ((Statement | FunctionDeclaration))*  ~  eoi
}

FunctionBody = @{
    (S? ~ (Statement | FunctionDeclaration))* ~ S?
}

FunctionDeclaration = {
    FunctionTok ~ Identifier ~ "(" ~ FormalParameterList? ~ ")" ~ "{" ~ FunctionBody ~ "}"
}

FunctionExpression = @{
    FunctionTok  ~  Identifier?  ~  "("  ~  FormalParameterList? ~
    S? ~ ")"  ~  "{"  ~  FunctionBody  ~  "}"
}

FormalParameterList = @{
    Identifier ~ (","  ~  Identifier)*
}

UseStrictDirective = @{
    "use" ~ whitespace ~ "strict" ~ ( "," ~ !(LineTerminator) ~ SourceCharacter )*
}

// Statements
Statement = {
      Block
    | VariableStatement
    | EmptyStatement
    | ExpressionStatement
    | IfStatement
    | IterationStatement
    | ContinueStatement
    | BreakStatement
    | ReturnStatement
    | WithStatement
    | LabelledStatement
    | SwitchStatement
    | ThrowStatement
    | TryStatement
    | DebuggerStatement
}

Block = @{
      "{"  ~ ( Statement)*  ~  "}"
}

VariableStatement = @{
    VarTok  ~  VariableDeclaration  ~ ( ","  ~  VariableDeclaration)* ~ EOS
}

VariableDeclaration = @{
    Identifier  ~ ( "=" ~ !("=")  ~  AssignmentExpression)?
}

VariableDeclarationNoIn = @{
    Identifier  ~ ( "=" ~ !("=")  ~  AssignmentExpressionNoIn)?
}

VariableDeclarationListNoIn = @{
    VariableDeclarationNoIn  ~ ( ","  ~  VariableDeclarationNoIn)*
}

// an empty statement is marked by an explicit semicolon, ASI does not apply
EmptyStatement = { ";" }

ExpressionStatement = @{
    !("{" | FunctionTok) ~ Expression ~ EOS
}

IfStatement = @{
      IfTok  ~  "("  ~  Expression  ~  ")"  ~  Statement ~
      (S? ~ ElseTok  ~  Statement)?
}

IterationStatement = {
     DoWhileStatement
 | WhileStatement
 | ForInStatement
 | ForStatement
}

DoWhileStatement = @{
    DoTok  ~  Statement  ~  WhileTok  ~  "("  ~  Expression  ~  ")" ~ EOS
}

WhileStatement = @{
    WhileTok  ~  "("  ~  Expression  ~  ")"  ~  Statement
}

ForInStatement = @{
    ForTok  ~  "(" ~ (ForInLeft | ForInVarLeft) ~ InTok  ~  Expression  ~  ")"  ~  Statement
}

ForInLeft = @{
      S? ~ LeftHandSideExpression ~ S?
}

ForInVarLeft = @{
      S? ~ VarTok  ~  VariableDeclarationNoIn ~ S?
}

ForStatement = @{
    ForTok  ~  "("  ~  (ForInit | ForVarInit)?  ~  ";"  ~ 
      ForTest?  ~  ";"  ~  ForUpdate?  ~  ")"  ~  Statement
}

ForInit = @{
    ExpressionNoIn
}

ForVarInit = @{
    VarTok  ~  VariableDeclarationListNoIn
}

ForTest = @{
    Expression
}

ForUpdate = @{
    Expression
}

ContinueStatement = @{
    ContinueTok ~ SnoLB? ~ (Identifier ~ EOS | EOSnoLB)
}

BreakStatement = @{
    BreakTok ~ SnoLB? ~ (Identifier ~ EOS | EOSnoLB)
}

ReturnStatement = @{
    ReturnTok ~ SnoLB? ~ (EOSnoLB | Expression ~ EOS)
}

WithStatement = @{
    WithTok  ~  "("  ~  Expression  ~  ")"  ~  Statement
}

LabelledStatement = @{
    Identifier  ~  ":"  ~  Statement
}

SwitchStatement = @{
    SwitchTok  ~  "("  ~  Expression  ~  ")"  ~  "{" ~
    CaseClause* ~ (DefaultClause ~ CaseClause*)?  ~  "}"
}

CaseClause = @{
    S? ~ CaseTok  ~  Expression  ~  ":"  ~ ( Statement)*
}

DefaultClause = @{
    S? ~ DefaultTok  ~  ":"  ~ ( Statement)*
}

ThrowStatement = @{
    ThrowTok ~ SnoLB? ~ (EOSnoLB | Expression ~ EOS)
}

TryStatement = @{
    TryTok  ~  Block  ~  (Catch  ~  Finally? | Finally)
}

Catch = @{
    CatchTok  ~  "("  ~  Identifier  ~  ")"  ~  Block
}

Finally = @{
    FinallyTok  ~  Block
}

DebuggerStatement = @{
    DebuggerTok  ~  EOS
}

// Expressions
Expression = {
    AssignmentExpression ~ ("," ~ AssignmentExpression)*
}

ExpressionNoIn = {
    AssignmentExpressionNoIn ~ ("," ~ AssignmentExpressionNoIn)*
}

AssignmentExpression = {
    LeftHandSideExpression ~ AssignmentOperator ~ AssignmentExpression
    | ConditionalExpression
}

AssignmentExpressionNoIn = {
    LeftHandSideExpression ~ AssignmentOperator ~ AssignmentExpressionNoIn
    | ConditionalExpressionNoIn
}

AssignmentOperator = {
    !("==") ~
    "="
    | "*="
    | "/="
    | "%="
    | "+="
    | "-="
    | "<<="
    | ">>="
    | ">>>="
    | "&="
    | "^="
    | "|="
}

ConditionalExpression = {
    LogicalOrExpression ~ ("?" ~ AssignmentExpression ~ ":" ~ AssignmentExpression)?
}

ConditionalExpressionNoIn = {
    LogicalOrExpressionNoIn ~ ("?" ~ AssignmentExpressionNoIn ~ ":" ~ AssignmentExpressionNoIn)?
}

LogicalOrExpression = {
    LogicalAndExpression  ~ ( "||"  ~  LogicalAndExpression)*
}

LogicalOrExpressionNoIn = {
    LogicalAndExpressionNoIn  ~ ( "||"  ~  LogicalAndExpressionNoIn)*
}

LogicalAndExpression = {
    BitwiseOrExpression  ~ ( "&&"  ~  BitwiseOrExpression)*
}

LogicalAndExpressionNoIn = {
    BitwiseOrExpressionNoIn  ~ ( "&&"  ~  BitwiseOrExpressionNoIn)*
}

BitwiseOrExpression = {
    BitwiseXOrExpression  ~ ( "|" ~ !("=")  ~  BitwiseXOrExpression)*
}

BitwiseOrExpressionNoIn = {
    BitwiseXOrExpressionNoIn  ~ ( "|" ~ !("=")  ~  BitwiseXOrExpressionNoIn)*
}

BitwiseXOrExpression = {
    BitwiseAndExpression  ~ ( "^" ~ !("=")  ~  BitwiseAndExpression)*
}

BitwiseXOrExpressionNoIn = {
    BitwiseAndExpressionNoIn  ~ ( "^" ~ !("=")  ~  BitwiseAndExpressionNoIn)*
}

BitwiseAndExpression = {
    EqualityExpression  ~ ( "&" ~ !("=")  ~  EqualityExpression)*
}

BitwiseAndExpressionNoIn = {
    EqualityExpressionNoIn  ~ ( "&" ~ !("=")  ~  EqualityExpressionNoIn)*
}

EqualityExpression = {
    RelationalExpression  ~ ( EqualityOp  ~  RelationalExpression)*
}

EqualityExpressionNoIn = {
    RelationalExpressionNoIn  ~ ( EqualityOp  ~  RelationalExpressionNoIn)*
}

EqualityOp = {
    "==="
    | "!=="
    | "=="
    | "!="
}

RelationalExpression = {
    ShiftExpression  ~ ( RelationalOp  ~  ShiftExpression)*
}

RelationalExpressionNoIn = {
    ShiftExpression  ~ ( RelationalOpNoIn  ~  ShiftExpression)*
}

RelationalOp = {
    "<="
    | ">="
    | "<"
    | ">"
    | InstanceOfTok
    | InTok
}

RelationalOpNoIn = {
    "<="
    | ">="
    | "<"
    | ">"
    | InstanceOfTok
}

ShiftExpression = {
    AdditiveExpression  ~ ( ShiftOp  ~  AdditiveExpression)*
}

ShiftOp = {
    "<<"
    | ">>>"
    | ">>"
}

AdditiveExpression = {
    MultiplicativeExpression  ~ ( AdditiveOp  ~  MultiplicativeExpression)*
}

AdditiveOp = {
     "+" ~ !("+" | "=")
    | "-" ~ !("-" | "=")
}

MultiplicativeExpression = {
    UnaryExpression  ~ ( MultiplicativeOp  ~  UnaryExpression)*
}

MultiplicativeOp = {
    ("*" | "/" | "%") ~ !("=")
}

UnaryExpression = {
    PostfixExpression
    | DeleteExpression
    | VoidExpression
    | TypeofExpression
    | PreIncrementExpression
    | PreDecrementExpression
    | UnaryPlusExpression
    | UnaryMinusExpression
    | BitwiseNotExpression
    | LogicalNotExpression
}

DeleteExpression = {
    DeleteTok  ~  UnaryExpression
}

VoidExpression = {
    VoidTok  ~  UnaryExpression
}

TypeofExpression = {
    TypeofTok  ~  UnaryExpression
}

PreIncrementExpression = {
    "++"  ~  UnaryExpression
}

PreDecrementExpression = {
    "--"  ~  UnaryExpression
}

UnaryPlusExpression = {
    "+"  ~  UnaryExpression
}

UnaryMinusExpression = {
    "-"  ~  UnaryExpression
}

BitwiseNotExpression = {
    "~"  ~  UnaryExpression
}

LogicalNotExpression = {
    "!"  ~  UnaryExpression
}

// why isn't ++a++ a valid UnaryExpression?
// answer: it is, and parses as ++(a++), the evaluation of which must throw a ReferenceError per spec
PostfixExpression = {
    LeftHandSideExpression ~ (SnoLB? ~ (PostIncrementOp | PostDecrementOp))?
}

PostIncrementOp = {
    "++"
}

PostDecrementOp = {
    "--"
}

// This LHSExpression adheres to the spec, which gives semantics for CallExpression and NewExpression
// See ECMAScript_5_streamable.peg for an alternative approach.
LeftHandSideExpression = {
    CallExpression
    | NewExpression
}

CallExpression = {
    MemberExpression ~ Arguments ~ (Arguments | BracketAccessor | DotAccessor)*
}

BracketAccessor = {
    "["  ~  Expression  ~  "]"
}

DotAccessor = {
    "."  ~  IdentifierName
}

Arguments = {
    "("  ~  ArgumentList?  ~  ")"
}

ArgumentList = {
    AssignmentExpression ~ ("," ~ AssignmentExpression)*
}

NewExpression = {
    MemberExpression
    | NewTok  ~  NewExpression
}

MemberExpression = {
    ( PrimaryExpression | FunctionExpression | NewTok  ~  MemberExpression  ~  Arguments ) ~ ( "["  ~  Expression  ~  "]" | "."  ~  IdentifierName )*
}

PrimaryExpression = {
    ThisTok
    | Identifier
    | Literal
    | ArrayLiteral
    | ObjectLiteral
    | "("  ~  Expression  ~  ")"
}

ArrayLiteral = {
    "[" ~ Elision? ~ "]"
    | "[" ~ ElementList ~ "]"
    | "[" ~ ElementList ~ "," ~ Elision? ~ "]"
}

ElementList = {
    Elision? ~ AssignmentExpression ~ ("," ~ Elision? ~ AssignmentExpression)*
}

Elision = {
    "," ~ Elision?
}

ObjectLiteral = {
    "{" ~ (PropertyNameAndValueList ~ ","? )? ~ "}"
}

PropertyNameAndValueList = {
    PropertyAssignment ~ ("," ~ PropertyAssignment)*
}

PropertyAssignment = {
    PropertyName ~ ":" ~ AssignmentExpression
    | PropertyGetter
    | PropertySetter
}

PropertyGetter = {
    "get" ~ PropertyName ~ "(" ~ ")" ~ "{" ~ FunctionBody ~ "}"
}

PropertySetter = {
    "set" ~ PropertyName  ~ "(" ~ PropertySetParameterList ~ ")" ~ "{" ~ FunctionBody ~ "}"
}

PropertyName = {
    IdentifierName
    | StringLiteral
    | NumericLiteral
}

PropertySetParameterList = {
    Identifier
}

// Lexical tokens
Literal = {
    NullLiteral
    | BooleanLiteral
    | NumericLiteral
    | StringLiteral
    | RegularExpressionLiteral
    | NullLiteral
}

NullLiteral = {
    NullTok
}

BooleanLiteral = {
    TrueTok
    | FalseTok
}

NumericLiteral = @{
    DecimalLiteral ~ !(IdentifierStart)
    | HexIntegerLiteral ~ !(IdentifierStart)
}

DecimalLiteral = @{
    DecimalIntegerLiteral ~ "." ~ DecimalDigit* ~ ExponentPart?
    | "." ~ DecimalDigit+ ~ ExponentPart?
    | DecimalIntegerLiteral ~ ExponentPart?
}

DecimalIntegerLiteral = @{
    "0"
    | ('1' .. '9') ~ DecimalDigit*
}

DecimalDigit = {
    '0' .. '9'
}

ExponentPart = @{
    ("e" | "E") ~ SignedInteger
}

SignedInteger = @{
    DecimalDigit+
    | "+" ~ DecimalDigit+
    | "-" ~ DecimalDigit+
}

HexIntegerLiteral = @{
    "0x" ~ HexDigit+
    | "0X" ~ HexDigit+
}

DQ = {
    "\u{0022}"
}

SQ = {
    "\u{0027}"
}

StringLiteral = @{
    DQ ~ DoubleStringCharacter* ~ DQ
    | SQ ~ SingleStringCharacter* ~ SQ
}

RS = {
    "\u{005C}"
}

DoubleStringCharacter = {
    !( DQ | RS | LineTerminator ) ~ SourceCharacter
    | RS ~ EscapeSequence
    | LineContinuation
}

SingleStringCharacter = {
    !( SQ | RS | LineTerminator ) ~ SourceCharacter
    | RS ~ EscapeSequence
    | LineContinuation
}

LineContinuation = @{
    RS ~ LineTerminatorSequence
}

EscapeSequence = @{
    CharacterEscapeSequence
    | "0" ~ !(DecimalDigit)
    | HexEscapeSequence
    | UnicodeEscapeSequence
}

CharacterEscapeSequence = {
    SingleEscapeCharacter
    | NonEscapeCharacter
}

SingleEscapeCharacter = {
    "\u{0027}"
    | "\u{0022}"
    | "\u{005C}"
    | "b"
    | "f"
    | "n"
    | "r"
    | "t"
    | "v"
}

NonEscapeCharacter = @{
    !(EscapeCharacter | LineTerminator) ~ SourceCharacter
}

EscapeCharacter = {
    SingleEscapeCharacter
    | DecimalDigit
    |  ("x" | "u")
}

HexEscapeSequence = @{
    "x" ~ HexDigit ~ HexDigit
}

UnicodeEscapeSequence = @{
    "u" ~ HexDigit{4}

}

RegularExpressionLiteral = @{
    "/" ~ RegularExpressionBody ~ "/" ~ RegularExpressionFlags
}

RegularExpressionBody = @{
    RegularExpressionFirstChar ~ RegularExpressionChar*
}

RegularExpressionFirstChar = @{
    !( LineTerminator |  "*" | "\u{005C}" | "[" ) ~ SourceCharacter //double check this
    | RegularExpressionBackslashSequence
    | RegularExpressionClass
}

RegularExpressionChar = @{
    !( LineTerminator | "\u{005C}" | "[" ) ~ SourceCharacter
    | RegularExpressionBackslashSequence
    | RegularExpressionClass
}

RegularExpressionBackslashSequence = @{
    RS ~ !(LineTerminator) ~ SourceCharacter
}

RegularExpressionClass = @{
    "[" ~ RegularExpressionClassChar* ~ "]"
}

RegularExpressionClassChar = {
    !(LineTerminator | "\u{005C}" | "\u{005D}") ~ SourceCharacter
    | RegularExpressionBackslashSequence
}

RegularExpressionFlags = @{
    IdentifierPart*
}

SourceCharacter = {
    '\u{0000}' .. '\u{10FFFF}'
}

WhiteSpace = {
    "\u{0009}"
    | "\u{000B}"
    | "\u{000C}"
    | "\u{0020}"
    | "\u{0085}"
    | "\u{00A0}"
    | "\u{200B}"
    | "\u{FEFF}"
    | Zs
}

LF = {
    "\u{000A}"
}

CR = {
    "\u{000D}"
}

LS = {
    "\u{2028}"
}

PS = {
    "\u{2029}"
}

LineTerminator = {
    LF
    | CR
    | LS
    | PS
}

LineTerminatorSequence = {
    LF
    | CR ~ LF
    | CR
    | LS
    | PS
}

Comment = {
    MultiLineComment
    | SingleLineComment
}

MultiLineComment = {
    "/*" ~ (!("*/") ~ SourceCharacter)* ~ "*/"
}

MultiLineCommentNoLB = {
    "/*" ~ (!("*/" | LineTerminator) ~ SourceCharacter)* ~ "*/"
}

SingleLineComment = {
    "//" ~
    (!("\u{000A}"
    | "\u{000D}"
    | "\u{2028}"
    |"\u{2029}") ~ UnicodeLetter)*
}

S = _{
    ( WhiteSpace | LineTerminatorSequence | Comment )+
}

SnoLB = {
    ( WhiteSpace | SingleLineComment | MultiLineCommentNoLB )+
}

// end of statement
EOS = @{
    S? ~ ";"
    | SnoLB? ~ LineTerminatorSequence
    | SnoLB? ~ &("}")
    | S? ~ EOF
}

// end of statement in a "no linebreak here" context
// EOSnoLB will consume a linebreak, but it won't extend to the next line
EOSnoLB = @{
    SnoLB? ~ ";"
    | SnoLB? ~ LineTerminatorSequence
    | SnoLB? ~ &("}")
    | SnoLB? ~ EOF
}

EOF = {
    !(SourceCharacter)
}
ReservedWord = @{
    ( Keyword
    | FutureReservedWord
    | "null"
    | "true"
    | "false"
     ) ~ !(IdentifierPart)
}
Keyword = {
    "break"
    | "case"
    | "catch"
    | "continue"
    | "debugger"
    | "default"
    | "delete"
    | "do"
    | "else"
    | "finally"
    | "for"
    | "function"
    | "if"
    | "instanceof"
    | "in"
    | "new"
    | "return"
    | "switch"
    | "this"
    | "throw"
    | "try"
    | "typeof"
    | "var"
    | "void"
    | "while"
    | "with"
}

FutureReservedWord = {
    "abstract"
    | "boolean"
    | "byte"
    | "char"
    | "class"
    | "const"
    | "double"
    | "enum"
    | "export"
    | "extends"
    | "final"
    | "float"
    | "goto"
    | "implements"
    | "import"
    | "interface"
    | "int"
    | "long"
    | "native"
    | "package"
    | "private"
    | "protected"
    | "public"
    | "short"
    | "static"
    | "super"
    | "synchronized"
    | "throws"
    | "transient"
    | "volatile"
}

Identifier = @{
    !(ReservedWord) ~ IdentifierName
}

IdentifierName = @{
    IdentifierStart ~ IdentifierPart*
}

IdentifierStart = @{
    UnicodeLetter
    | "$"
    | "_"
    | RS ~ UnicodeEscapeSequence
}

IdentifierPart = @{
    IdentifierStart
    | (
        Mn
        | Mc
        | Nd
        | Pc
    )
}

UnicodeLetter = {
    Lu
    | Ll
    | Lt
    | Lm
    | Lo
    | Nl
}

HexDigit = {
    '0' .. '9'
    | 'a' .. 'f'
    | 'A' .. 'F'
}

FalseTok = @{
    "false" ~ !(IdentifierPart)
}

TrueTok = @{
    "true" ~ !(IdentifierPart)
}

NullTok = @{
    "null" ~ !(IdentifierPart)
}

BreakTok = @{
    "break" ~ !(IdentifierPart)
}

ContinueTok = @{
    "continue" ~ !(IdentifierPart)
}

DebuggerTok = @{
    "debugger" ~ !(IdentifierPart)
}

InTok = @{
    "in" ~ !(IdentifierPart)
}

InstanceOfTok = @{
    "instanceof" ~ !(IdentifierPart)
}

DeleteTok = @{
    "delete" ~ !(IdentifierPart)
}

FunctionTok = @{
    "function" ~ !(IdentifierPart)
}

NewTok = @{
    "new" ~ !(IdentifierPart)
}

ThisTok = @{
    "this" ~ !(IdentifierPart)
}

TypeofTok = @{
    "typeof" ~ !(IdentifierPart)
}

VoidTok = @{
    "void" ~ !(IdentifierPart)
}

IfTok = @{
    "if" ~ !(IdentifierPart)
}

ElseTok = @{
    "else" ~ !(IdentifierPart)
}

DoTok = @{
    "do" ~ !(IdentifierPart)
}

WhileTok = @{
    "while" ~ !(IdentifierPart)
}

ForTok = @{
    "for" ~ !(IdentifierPart)
}

VarTok = @{
    "var" ~ !(IdentifierPart)
}

ReturnTok = @{
    "return" ~ !(IdentifierPart)
}

CaseTok = @{
    "case" ~ !(IdentifierPart)
}

DefaultTok = @{
    "default" ~ !(IdentifierPart)
}

SwitchTok = @{
    "switch" ~ !(IdentifierPart)
}

ThrowTok = @{
    "throw" ~ !(IdentifierPart)
}

CatchTok = @{
    "catch" ~ !(IdentifierPart)
}

FinallyTok = @{
    "finally" ~ !(IdentifierPart)
}

TryTok = @{
    "try" ~ !(IdentifierPart)
}

WithTok = @{
    "with" ~ !(IdentifierPart)
}


//Unicode sets
Ll = {
    'ℊ' .. 'ℏ' |
    'ℓ' .. 'ℓ' |
    'ℯ' .. 'ℯ' |
    'ℴ' .. 'ℽ' |
    'ⅆ' .. 'ⅎ' |
    'ↄ' .. 'ↄ' |
    '𐐨' .. '𐐯' |
    '𐐰' .. '𐐿' |
    '𐑀' .. '𐑏' |
    'a' .. 'o' |
    'p' .. 'z' |
    'µ' .. 'µ' |
    'ß' .. 'ß' |
    'à' .. 'ï' |
    'ð' .. 'ÿ' |
    'ā' .. 'ď' |
    'đ' .. 'ğ' |
    'ġ' .. 'į' |
    'ı' .. 'ľ' |
    'ŀ' .. 'ŏ' |
    'ő' .. 'ş' |
    'š' .. 'ů' |
    'ű' .. 'ſ' |
    'ƀ' .. 'ƍ' |
    'ƒ' .. 'ƞ' |
    'ơ' .. 'ƭ' |
    'ư' .. 'ƿ' |
    'ǆ' .. 'ǎ' |
    'ǐ' .. 'ǟ' |
    'ǡ' .. 'ǯ' |
    'ǰ' .. 'ǿ' |
    'ȁ' .. 'ȏ' |
    'ȑ' .. 'ȟ' |
    'ȡ' .. 'ȯ' |
    'ȱ' .. 'ȿ' |
    'ɀ' .. 'ɏ' |
    'ɐ' .. 'ɟ' |
    'ɠ' .. 'ɯ' |
    'ɰ' .. 'ɿ' |
    'ʀ' .. 'ʏ' |
    'ʐ' .. 'ʟ' |
    'ʠ' .. 'ʯ' |
    'ͱ' .. 'ͽ' |
    'ΐ' .. 'ΐ' |
    'ά' .. 'ί' |
    'ΰ' .. 'ο' |
    'π' .. 'ώ' |
    'ϐ' .. 'ϟ' |
    'ϡ' .. 'ϯ' |
    'ϰ' .. 'ϼ' |
    'а' .. 'п' |
    'р' .. 'я' |
    'ѐ' .. 'џ' |
    'ѡ' .. 'ѯ' |
    'ѱ' .. 'ѿ' |
    'ҁ' .. 'ҏ' |
    'ґ' .. 'ҟ' |
    'ҡ' .. 'ү' |
    'ұ' .. 'ҿ' |
    'ӂ' .. 'ӏ' |
    'ӑ' .. 'ӟ' |
    'ӡ' .. 'ӯ' |
    'ӱ' .. 'ӿ' |
    'ԁ' .. 'ԏ' |
    'ԑ' .. 'ԟ' |
    'ԡ' .. 'ԯ' |
    'ՠ' .. 'կ' |
    'հ' .. 'տ' |
    'ր' .. 'ֈ' |
    'ა' .. 'ჟ' |
    'რ' .. 'ჯ' |
    'ჰ' .. 'ჿ' |
    'ᏸ' .. 'ᏽ' |
    'ᲀ' .. 'ᲈ' |
    'ᴀ' .. 'ᴏ' |
    'ᴐ' .. 'ᴟ' |
    'ᴠ' .. 'ᴫ' |
    'ᵫ' .. 'ᵯ' |
    'ᵰ' .. 'ᵿ' |
    'ᶀ' .. 'ᶏ' |
    'ᶐ' .. 'ᶚ' |
    'ḁ' .. 'ḏ' |
    'ḑ' .. 'ḟ' |
    'ḡ' .. 'ḯ' |
    'ḱ' .. 'ḿ' |
    'ṁ' .. 'ṏ' |
    'ṑ' .. 'ṟ' |
    'ṡ' .. 'ṯ' |
    'ṱ' .. 'ṿ' |
    'ẁ' .. 'ẏ' |
    'ẑ' .. 'ẟ' |
    'ạ' .. 'ắ' |
    'ằ' .. 'ế' |
    'ề' .. 'ỏ' |
    'ố' .. 'ở' |
    'ỡ' .. 'ữ' |
    'ự' .. 'ỿ' |
    'ἀ' .. 'ἇ' |
    'ἐ' .. 'ἕ' |
    'ἠ' .. 'ἧ' |
    'ἰ' .. 'ἷ' |
    'ὀ' .. 'ὅ' |
    'ὐ' .. 'ὗ' |
    'ὠ' .. 'ὧ' |
    'ὰ' .. 'ώ' |
    'ᾀ' .. 'ᾇ' |
    'ᾐ' .. 'ᾗ' |
    'ᾠ' .. 'ᾧ' |
    'ᾰ' .. 'ι' |
    'ῂ' .. 'ῇ' |
    'ῐ' .. 'ῗ' |
    'ῠ' .. 'ῧ' |
    'ῲ' .. 'ῷ' |
    'ⰰ' .. 'ⰿ' |
    'ⱀ' .. 'ⱏ' |
    'ⱐ' .. 'ⱞ' |
    'ⱡ' .. 'ⱬ' |
    'ⱱ' .. 'ⱻ' |
    'ⲁ' .. 'ⲏ' |
    'ⲑ' .. 'ⲟ' |
    'ⲡ' .. 'ⲯ' |
    'ⲱ' .. 'ⲿ' |
    'ⳁ' .. 'ⳏ' |
    'ⳑ' .. 'ⳟ' |
    'ⳡ' .. 'ⳮ' |
    'ⳳ' .. 'ⳳ' |
    'ⴀ' .. 'ⴏ' |
    'ⴐ' .. 'ⴟ' |
    'ⴠ' .. 'ⴭ' |
    'ꙁ' .. 'ꙏ' |
    'ꙑ' .. 'ꙟ' |
    'ꙡ' .. 'ꙭ' |
    'ꚁ' .. 'ꚏ' |
    'ꚑ' .. 'ꚛ' |
    'ꜣ' .. 'ꜯ' |
    'ꜰ' .. 'ꜿ' |
    'ꝁ' .. 'ꝏ' |
    'ꝑ' .. 'ꝟ' |
    'ꝡ' .. 'ꝯ' |
    'ꝱ' .. 'ꝿ' |
    'ꞁ' .. 'ꞎ' |
    'ꞑ' .. 'ꞟ' |
    'ꞡ' .. 'ꞯ' |
    'ꞵ' .. 'ꞹ' |
    'ꟺ' .. 'ꟺ' |
    'ꬰ' .. 'ꬿ' |
    'ꭀ' .. 'ꭏ' |
    'ꭐ' .. 'ꭚ' |
    'ꭠ' .. 'ꭥ' |
    'ꭰ' .. 'ꭿ' |
    'ꮀ' .. 'ꮏ' |
    'ꮐ' .. 'ꮟ' |
    'ꮠ' .. 'ꮯ' |
    'ꮰ' .. 'ꮿ' |
    'ﬀ' .. 'ﬆ' |
    'ﬓ' .. 'ﬗ' |
    'ａ' .. 'ｏ' |
    'ｐ' .. 'ｚ' |
    '𐓘' .. '𐓟' |
    '𐓠' .. '𐓯' |
    '𐓰' .. '𐓻' |
    '𐳀' .. '𐳏' |
    '𐳐' .. '𐳟' |
    '𐳠' .. '𐳯' |
    '𐳰' .. '𐳲' |
    '𑣀' .. '𑣏' |
    '𑣐' .. '𑣟' |
    '𖹠' .. '𖹯' |
    '𖹰' .. '𖹿' |
    '𝐚' .. '𝐟' |
    '𝐠' .. '𝐯' |
    '𝐰' .. '𝐳' |
    '𝑎' .. '𝑏' |
    '𝑐' .. '𝑟' |
    '𝑠' .. '𝑧' |
    '𝒂' .. '𝒏' |
    '𝒐' .. '𝒛' |
    '𝒶' .. '𝒿' |
    '𝓀' .. '𝓏' |
    '𝓪' .. '𝓯' |
    '𝓰' .. '𝓿' |
    '𝔀' .. '𝔃' |
    '𝔞' .. '𝔟' |
    '𝔠' .. '𝔯' |
    '𝔰' .. '𝔷' |
    '𝕒' .. '𝕟' |
    '𝕠' .. '𝕫' |
    '𝖆' .. '𝖏' |
    '𝖐' .. '𝖟' |
    '𝖺' .. '𝖿' |
    '𝗀' .. '𝗏' |
    '𝗐' .. '𝗓' |
    '𝗮' .. '𝗯' |
    '𝗰' .. '𝗿' |
    '𝘀' .. '𝘇' |
    '𝘢' .. '𝘯' |
    '𝘰' .. '𝘻' |
    '𝙖' .. '𝙟' |
    '𝙠' .. '𝙯' |
    '𝚊' .. '𝚏' |
    '𝚐' .. '𝚟' |
    '𝚠' .. '𝚥' |
    '𝛂' .. '𝛏' |
    '𝛐' .. '𝛟' |
    '𝛠' .. '𝛡' |
    '𝛼' .. '𝛿' |
    '𝜀' .. '𝜏' |
    '𝜐' .. '𝜛' |
    '𝜶' .. '𝜿' |
    '𝝀' .. '𝝎' |
    '𝝐' .. '𝝕' |
    '𝝰' .. '𝝿' |
    '𝞀' .. '𝞏' |
    '𝞪' .. '𝞯' |
    '𝞰' .. '𝞿' |
    '𝟀' .. '𝟋' |
    '𞤢' .. '𞤯' |
    '𞤰' .. '𞤿' |
    '𞥀' .. '𞥃'
}
Mn = {
    'ိ' .. 'ု' |
    'ူ' .. 'ှ' |
    'ၘ' .. 'ၟ' |
    'ၠ' .. 'ၠ' |
    'ၱ' .. 'ၴ' |
    'ႂ' .. 'ႍ' |
    'ႝ' .. 'ႝ' |
    '፝' .. '፟' |
    'ᜒ' .. '᜔' |
    'ᜲ' .. '᜴' |
    'ᝒ' .. 'ᝓ' |
    'ᝲ' .. 'ᝳ' |
    '᠋' .. '᠍' |
    'ᢅ' .. 'ᢆ' |
    'ᤠ' .. 'ᤨ' |
    'ᤲ' .. '᤻' |
    '〪' .. '〭' |
    '゙' .. '゚' |
    '𐍶' .. '𐍺' |
    '𑀁' .. '𑀁' |
    '𑀸' .. '𑀿' |
    '𑁀' .. '𑁆' |
    '𑁿' .. '𑁿' |
    '𑂀' .. '𑂁' |
    '𑄀' .. '𑄂' |
    '𑄧' .. '𑄯' |
    '𑄰' .. '𑄴' |
    '𑅳' .. '𑅳' |
    '𑆀' .. '𑆁' |
    '𑈯' .. '𑈯' |
    '𑈰' .. '𑈾' |
    '𑌀' .. '𑌁' |
    '𑌻' .. '𑌼' |
    '𑍀' .. '𑍀' |
    '𑍦' .. '𑍬' |
    '𑍰' .. '𑍴' |
    '𑐸' .. '𑐿' |
    '𑑂' .. '𑑆' |
    '𑑞' .. '𑑞' |
    '𑘳' .. '𑘿' |
    '𑙀' .. '𑙀' |
    '𑜝' .. '𑜟' |
    '𑜢' .. '𑜫' |
    '𑠯' .. '𑠯' |
    '𑠰' .. '𑠺' |
    '̀' .. '̏' |
    '̐' .. '̟' |
    '̠' .. '̯' |
    '̰' .. '̿' |
    '̀' .. '͏' |
    '͐' .. '͟' |
    '͠' .. 'ͯ' |
    '҃' .. '҇' |
    '֑' .. '֟' |
    '֠' .. '֯' |
    'ְ' .. 'ֿ' |
    'ׁ' .. 'ׇ' |
    'ؐ' .. 'ؚ' |
    'ً' .. 'ُ' |
    'ِ' .. 'ٟ' |
    'ٰ' .. 'ٰ' |
    'ۖ' .. '۟' |
    '۠' .. 'ۭ' |
    'ܑ' .. 'ܑ' |
    'ܰ' .. 'ܿ' |
    '݀' .. '݊' |
    'ަ' .. 'ޯ' |
    'ް' .. 'ް' |
    '߫' .. '߯' |
    '߰' .. '߽' |
    'ࠖ' .. 'ࠟ' |
    'ࠠ' .. '࠭' |
    '࡙' .. '࡛' |
    '࣓' .. 'ࣟ' |
    '࣠' .. '࣯' |
    'ࣰ' .. 'ࣿ' |
    'ऀ' .. 'ं' |
    'ऺ' .. '़' |
    'ु' .. '्' |
    '॑' .. 'ॗ' |
    'ॢ' .. 'ॣ' |
    'ঁ' .. 'ঁ' |
    '়' .. '়' |
    'ু' .. '্' |
    'ৢ' .. 'ৣ' |
    '৾' .. '৾' |
    'ਁ' .. 'ਂ' |
    '਼' .. '਼' |
    'ੁ' .. '੍' |
    'ੑ' .. 'ੑ' |
    'ੰ' .. 'ੵ' |
    'ઁ' .. 'ં' |
    '઼' .. '઼' |
    'ુ' .. '્' |
    'ૢ' .. 'ૣ' |
    'ૺ' .. '૿' |
    'ଁ' .. 'ଁ' |
    '଼' .. 'ି' |
    'ୁ' .. '୍' |
    'ୖ' .. 'ୖ' |
    'ୢ' .. 'ୣ' |
    'ஂ' .. 'ஂ' |
    'ீ' .. '்' |
    'ఀ' .. 'ఄ' |
    'ా' .. 'ి' |
    'ీ' .. '్' |
    'ౕ' .. 'ౖ' |
    'ౢ' .. 'ౣ' |
    'ಁ' .. 'ಁ' |
    '಼' .. 'ಿ' |
    'ೆ' .. '್' |
    'ೢ' .. 'ೣ' |
    'ഀ' .. 'ഁ' |
    '഻' .. '഼' |
    'ു' .. '്' |
    'ൢ' .. 'ൣ' |
    '්' .. '්' |
    'ි' .. 'ූ' |
    'ั' .. 'ฺ' |
    '็' .. '๎' |
    'ັ' .. 'ຼ' |
    '່' .. 'ໍ' |
    '༘' .. '༙' |
    '༵' .. '༹' |
    'ཱ' .. 'ཾ' |
    'ྀ' .. 'ྏ' |
    'ྐ' .. 'ྟ' |
    'ྠ' .. 'ྯ' |
    'ྰ' .. 'ྼ' |
    '࿆' .. '࿆' |
    '឴' .. 'ួ' |
    'ំ' .. '៏' |
    '័' .. '៝' |
    'ᢩ' .. 'ᢩ' |
    'ᨗ' .. 'ᨛ' |
    'ᩖ' .. 'ᩞ' |
    '᩠' .. 'ᩬ' |
    'ᩳ' .. '᩿' |
    '᪰' .. '᪽' |
    'ᬀ' .. 'ᬃ' |
    '᬴' .. 'ᬼ' |
    'ᭂ' .. 'ᭂ' |
    '᭫' .. '᭯' |
    '᭰' .. '᭳' |
    'ᮀ' .. 'ᮁ' |
    'ᮢ' .. 'ᮭ' |
    '᯦' .. 'ᯯ' |
    'ᯰ' .. 'ᯱ' |
    'ᰬ' .. 'ᰯ' |
    'ᰰ' .. '᰷' |
    '᳐' .. '᳟' |
    '᳠' .. '᳭' |
    '᳴' .. '᳹' |
    '᷀' .. '᷏' |
    '᷐' .. 'ᷟ' |
    'ᷠ' .. 'ᷯ' |
    'ᷰ' .. '᷿' |
    '⃐' .. '⃜' |
    '⃡' .. '⃯' |
    '⃰' .. '⃰' |
    '⳯' .. '⳯' |
    '⳰' .. '⳱' |
    '⵿' .. '⵿' |
    'ⷠ' .. 'ⷯ' |
    'ⷰ' .. 'ⷿ' |
    '꙯' .. '꙯' |
    'ꙴ' .. '꙽' |
    'ꚞ' .. 'ꚟ' |
    '꛰' .. '꛱' |
    'ꠂ' .. 'ꠋ' |
    'ꠥ' .. 'ꠦ' |
    '꣄' .. 'ꣅ' |
    '꣠' .. '꣯' |
    '꣰' .. 'ꣿ' |
    'ꤦ' .. '꤭' |
    'ꥇ' .. 'ꥏ' |
    'ꥐ' .. 'ꥑ' |
    'ꦀ' .. 'ꦂ' |
    '꦳' .. 'ꦼ' |
    'ꧥ' .. 'ꧥ' |
    'ꨩ' .. 'ꨮ' |
    'ꨱ' .. 'ꨶ' |
    'ꩃ' .. 'ꩌ' |
    'ꩼ' .. 'ꩼ' |
    'ꪰ' .. '꪿' |
    '꫁' .. '꫁' |
    'ꫬ' .. 'ꫭ' |
    '꫶' .. '꫶' |
    'ꯥ' .. '꯭' |
    'ﬞ' .. 'ﬞ' |
    '︀' .. '️' |
    '︠' .. '︯' |
    '𐇽' .. '𐇽' |
    '𐋠' .. '𐋠' |
    '𐨁' .. '𐨏' |
    '𐨸' .. '𐨿' |
    '𐫥' .. '𐫦' |
    '𐴤' .. '𐴧' |
    '𐽆' .. '𐽏' |
    '𐽐' .. '𐽐' |
    '𑂳' .. '𑂺' |
    '𑆶' .. '𑆾' |
    '𑇉' .. '𑇌' |
    '𑋟' .. '𑋟' |
    '𑋣' .. '𑋪' |
    '𑒳' .. '𑒿' |
    '𑓀' .. '𑓃' |
    '𑖲' .. '𑖿' |
    '𑗀' .. '𑗀' |
    '𑗜' .. '𑗝' |
    '𑚫' .. '𑚭' |
    '𑚰' .. '𑚷' |
    '𑨁' .. '𑨊' |
    '𑨳' .. '𑨾' |
    '𑩇' .. '𑩇' |
    '𑩑' .. '𑩛' |
    '𑪊' .. '𑪏' |
    '𑪐' .. '𑪙' |
    '𑰰' .. '𑰿' |
    '𑲒' .. '𑲟' |
    '𑲠' .. '𑲯' |
    '𑲰' .. '𑲶' |
    '𑴱' .. '𑴿' |
    '𑵀' .. '𑵇' |
    '𑶐' .. '𑶗' |
    '𑻳' .. '𑻴' |
    '𖫰' .. '𖫴' |
    '𖬰' .. '𖬶' |
    '𖾏' .. '𖾏' |
    '𖾐' .. '𖾒' |
    '𛲝' .. '𛲞' |
    '𝅧' .. '𝅩' |
    '𝅻' .. '𝅿' |
    '𝆀' .. '𝆋' |
    '𝆪' .. '𝆭' |
    '𝉂' .. '𝉄' |
    '𝨀' .. '𝨏' |
    '𝨐' .. '𝨟' |
    '𝨠' .. '𝨯' |
    '𝨰' .. '𝨿' |
    '𝩀' .. '𝩏' |
    '𝩐' .. '𝩟' |
    '𝩠' .. '𝩬' |
    '𝩵' .. '𝩵' |
    '𝪄' .. '𝪄' |
    '𝪛' .. '𝪟' |
    '𝪡' .. '𝪯' |
    '𞀀' .. '𞀏' |
    '𞀐' .. '𞀟' |
    '𞀠' .. '𞀪' |
    '𞣐' .. '𞣖' |
    '𞥄' .. '𞥊' |
    '󠄀' .. '󠄏' |
    '󠄐' .. '󠄟' |
    '󠄠' .. '󠄯' |
    '󠄰' .. '󠄿' |
    '󠅀' .. '󠅏' |
    '󠅐' .. '󠅟' |
    '󠅠' .. '󠅯' |
    '󠅰' .. '󠅿' |
    '󠆀' .. '󠆏' |
    '󠆐' .. '󠆟' |
    '󠆠' .. '󠆯' |
    '󠆰' .. '󠆿' |
    '󠇀' .. '󠇏' |
    '󠇐' .. '󠇟' |
    '󠇠' .. '󠇯'
}
Mc = {
    'ါ' .. 'ာ' |
    'ေ' .. 'ြ' |
    'ၖ' .. 'ၗ' |
    'ၢ' .. 'ၭ' |
    'ႃ' .. 'ႏ' |
    'ႚ' .. 'ႜ' |
    'ᤣ' .. 'ᤫ' |
    'ᤰ' .. 'ᤸ' |
    '〮' .. '〯' |
    '𑀀' .. '𑀂' |
    '𑂂' .. '𑂂' |
    '𑄬' .. '𑄬' |
    '𑅅' .. '𑅆' |
    '𑆂' .. '𑆂' |
    '𑈬' .. '𑈮' |
    '𑈲' .. '𑈵' |
    '𑌂' .. '𑌃' |
    '𑌾' .. '𑌿' |
    '𑍁' .. '𑍍' |
    '𑍗' .. '𑍗' |
    '𑍢' .. '𑍣' |
    '𑐵' .. '𑐷' |
    '𑑀' .. '𑑅' |
    '𑘰' .. '𑘾' |
    '𑜠' .. '𑜦' |
    '𑠬' .. '𑠮' |
    '𑠸' .. '𑠸' |
    'ः' .. 'ः' |
    'ऻ' .. 'ि' |
    'ी' .. 'ॏ' |
    'ং' .. 'ঃ' |
    'া' .. 'ি' |
    'ী' .. 'ৌ' |
    'ৗ' .. 'ৗ' |
    'ਃ' .. 'ਃ' |
    'ਾ' .. 'ਿ' |
    'ੀ' .. 'ੀ' |
    'ઃ' .. 'ઃ' |
    'ા' .. 'િ' |
    'ી' .. 'ૌ' |
    'ଂ' .. 'ଃ' |
    'ା' .. 'ା' |
    'ୀ' .. 'ୌ' |
    'ୗ' .. 'ୗ' |
    'ா' .. 'ி' |
    'ு' .. 'ௌ' |
    'ௗ' .. 'ௗ' |
    'ఁ' .. 'ః' |
    'ు' .. 'ౄ' |
    'ಂ' .. 'ಃ' |
    'ಾ' .. 'ಾ' |
    'ೀ' .. 'ೋ' |
    'ೕ' .. 'ೖ' |
    'ം' .. 'ഃ' |
    'ാ' .. 'ി' |
    'ീ' .. 'ൌ' |
    'ൗ' .. 'ൗ' |
    'ං' .. 'ඃ' |
    'ා' .. 'ා' |
    'ැ' .. 'ෟ' |
    'ෲ' .. 'ෳ' |
    '༾' .. '༿' |
    'ཿ' .. 'ཿ' |
    'ា' .. 'ឿ' |
    'ៀ' .. 'ៈ' |
    'ᨙ' .. 'ᨚ' |
    'ᩕ' .. 'ᩗ' |
    'ᩡ' .. 'ᩯ' |
    'ᩰ' .. 'ᩲ' |
    'ᬄ' .. 'ᬄ' |
    'ᬵ' .. 'ᬿ' |
    'ᭀ' .. '᭄' |
    'ᮂ' .. 'ᮂ' |
    'ᮡ' .. '᮪' |
    'ᯧ' .. 'ᯮ' |
    '᯲' .. '᯳' |
    'ᰤ' .. 'ᰫ' |
    'ᰴ' .. 'ᰵ' |
    '᳡' .. '᳡' |
    'ᳲ' .. '᳷' |
    'ꠣ' .. 'ꠧ' |
    'ꢀ' .. 'ꢁ' |
    'ꢴ' .. 'ꢿ' |
    'ꣀ' .. 'ꣃ' |
    'ꥒ' .. '꥓' |
    'ꦃ' .. 'ꦃ' |
    'ꦴ' .. 'ꦿ' |
    '꧀' .. '꧀' |
    'ꨯ' .. 'ꨯ' |
    'ꨰ' .. 'ꨴ' |
    'ꩍ' .. 'ꩍ' |
    'ꩻ' .. 'ꩽ' |
    'ꫫ' .. 'ꫯ' |
    'ꫵ' .. 'ꫵ' |
    'ꯣ' .. '꯬' |
    '𑂰' .. '𑂸' |
    '𑆳' .. '𑆿' |
    '𑇀' .. '𑇀' |
    '𑋠' .. '𑋢' |
    '𑒰' .. '𑒾' |
    '𑓁' .. '𑓁' |
    '𑖯' .. '𑖯' |
    '𑖰' .. '𑖾' |
    '𑚬' .. '𑚯' |
    '𑚶' .. '𑚶' |
    '𑨹' .. '𑨹' |
    '𑩗' .. '𑩘' |
    '𑪗' .. '𑪗' |
    '𑰯' .. '𑰯' |
    '𑰾' .. '𑰾' |
    '𑲩' .. '𑲩' |
    '𑲱' .. '𑲴' |
    '𑶊' .. '𑶎' |
    '𑶓' .. '𑶖' |
    '𑻵' .. '𑻶' |
    '𖽑' .. '𖽟' |
    '𖽠' .. '𖽯' |
    '𖽰' .. '𖽾' |
    '𝅥' .. '𝅯' |
    '𝅰' .. '𝅲'
}
Lu = {
    'ℂ' .. 'ℍ' |
    'ℐ' .. 'ℝ' |
    'ℤ' .. 'ℭ' |
    'ℰ' .. 'ℿ' |
    'ⅅ' .. 'ⅅ' |
    'Ↄ' .. 'Ↄ' |
    '𐐀' .. '𐐏' |
    '𐐐' .. '𐐟' |
    '𐐠' .. '𐐧' |
    'A' .. 'O' |
    'P' .. 'Z' |
    'À' .. 'Ï' |
    'Ð' .. 'Þ' |
    'Ā' .. 'Ď' |
    'Đ' .. 'Ğ' |
    'Ġ' .. 'Į' |
    'İ' .. 'Ŀ' |
    'Ł' .. 'Ŏ' |
    'Ő' .. 'Ş' |
    'Š' .. 'Ů' |
    'Ű' .. 'Ž' |
    'Ɓ' .. 'Ə' |
    'Ɛ' .. 'Ɵ' |
    'Ơ' .. 'Ư' |
    'Ʊ' .. 'Ƽ' |
    'Ǆ' .. 'Ǐ' |
    'Ǒ' .. 'Ǟ' |
    'Ǡ' .. 'Ǯ' |
    'Ǳ' .. 'Ǿ' |
    'Ȁ' .. 'Ȏ' |
    'Ȑ' .. 'Ȟ' |
    'Ƞ' .. 'Ȯ' |
    'Ȱ' .. 'Ⱦ' |
    'Ɂ' .. 'Ɏ' |
    'Ͱ' .. 'Ϳ' |
    'Ά' .. 'Ώ' |
    'Α' .. 'Ο' |
    'Π' .. 'Ϋ' |
    'Ϗ' .. 'Ϗ' |
    'ϒ' .. 'Ϟ' |
    'Ϡ' .. 'Ϯ' |
    'ϴ' .. 'Ͽ' |
    'Ѐ' .. 'Џ' |
    'А' .. 'П' |
    'Р' .. 'Я' |
    'Ѡ' .. 'Ѯ' |
    'Ѱ' .. 'Ѿ' |
    'Ҁ' .. 'Ҏ' |
    'Ґ' .. 'Ҟ' |
    'Ҡ' .. 'Ү' |
    'Ұ' .. 'Ҿ' |
    'Ӏ' .. 'Ӎ' |
    'Ӑ' .. 'Ӟ' |
    'Ӡ' .. 'Ӯ' |
    'Ӱ' .. 'Ӿ' |
    'Ԁ' .. 'Ԏ' |
    'Ԑ' .. 'Ԟ' |
    'Ԡ' .. 'Ԯ' |
    'Ա' .. 'Կ' |
    'Հ' .. 'Տ' |
    'Ր' .. 'Ֆ' |
    'Ⴀ' .. 'Ⴏ' |
    'Ⴐ' .. 'Ⴟ' |
    'Ⴠ' .. 'Ⴭ' |
    'Ꭰ' .. 'Ꭿ' |
    'Ꮀ' .. 'Ꮏ' |
    'Ꮐ' .. 'Ꮟ' |
    'Ꮠ' .. 'Ꮯ' |
    'Ꮰ' .. 'Ꮿ' |
    'Ᏸ' .. 'Ᏽ' |
    'Ა' .. 'Ჟ' |
    'Რ' .. 'Ჯ' |
    'Ჰ' .. 'Ჿ' |
    'Ḁ' .. 'Ḏ' |
    'Ḑ' .. 'Ḟ' |
    'Ḡ' .. 'Ḯ' |
    'Ḱ' .. 'Ḿ' |
    'Ṁ' .. 'Ṏ' |
    'Ṑ' .. 'Ṟ' |
    'Ṡ' .. 'Ṯ' |
    'Ṱ' .. 'Ṿ' |
    'Ẁ' .. 'Ẏ' |
    'Ẑ' .. 'ẞ' |
    'Ạ' .. 'Ắ' |
    'Ằ' .. 'Ế' |
    'Ề' .. 'Ỏ' |
    'Ố' .. 'Ở' |
    'Ỡ' .. 'Ữ' |
    'Ự' .. 'Ỿ' |
    'Ἀ' .. 'Ἇ' |
    'Ἐ' .. 'Ἕ' |
    'Ἠ' .. 'Ἧ' |
    'Ἰ' .. 'Ἷ' |
    'Ὀ' .. 'Ὅ' |
    'Ὑ' .. 'Ὗ' |
    'Ὠ' .. 'Ὧ' |
    'Ᾰ' .. 'Ά' |
    'Ὲ' .. 'Ή' |
    'Ῐ' .. 'Ί' |
    'Ῠ' .. 'Ῥ' |
    'Ὸ' .. 'Ώ' |
    'Ⰰ' .. 'Ⰿ' |
    'Ⱀ' .. 'Ⱏ' |
    'Ⱐ' .. 'Ⱞ' |
    'Ⱡ' .. 'Ɐ' |
    'Ɒ' .. 'Ɀ' |
    'Ⲁ' .. 'Ⲏ' |
    'Ⲑ' .. 'Ⲟ' |
    'Ⲡ' .. 'Ⲯ' |
    'Ⲱ' .. 'Ⲿ' |
    'Ⳁ' .. 'Ⳏ' |
    'Ⳑ' .. 'Ⳟ' |
    'Ⳡ' .. 'Ⳮ' |
    'Ⳳ' .. 'Ⳳ' |
    'Ꙁ' .. 'Ꙏ' |
    'Ꙑ' .. 'Ꙟ' |
    'Ꙡ' .. 'Ꙭ' |
    'Ꚁ' .. 'Ꚏ' |
    'Ꚑ' .. 'Ꚛ' |
    'Ꜣ' .. 'Ꜯ' |
    'Ꜳ' .. 'Ꜿ' |
    'Ꝁ' .. 'Ꝏ' |
    'Ꝑ' .. 'Ꝟ' |
    'Ꝡ' .. 'Ꝯ' |
    'Ꝺ' .. 'Ꝿ' |
    'Ꞁ' .. 'Ɥ' |
    'Ꞑ' .. 'Ꞟ' |
    'Ꞡ' .. 'Ɪ' |
    'Ʞ' .. 'Ꞹ' |
    'Ａ' .. 'Ｏ' |
    'Ｐ' .. 'Ｚ' |
    '𐒰' .. '𐒿' |
    '𐓀' .. '𐓏' |
    '𐓐' .. '𐓓' |
    '𐲀' .. '𐲏' |
    '𐲐' .. '𐲟' |
    '𐲠' .. '𐲯' |
    '𐲰' .. '𐲲' |
    '𑢠' .. '𑢯' |
    '𑢰' .. '𑢿' |
    '𖹀' .. '𖹏' |
    '𖹐' .. '𖹟' |
    '𝐀' .. '𝐏' |
    '𝐐' .. '𝐙' |
    '𝐴' .. '𝐿' |
    '𝑀' .. '𝑍' |
    '𝑨' .. '𝑯' |
    '𝑰' .. '𝑿' |
    '𝒀' .. '𝒁' |
    '𝒜' .. '𝒟' |
    '𝒢' .. '𝒯' |
    '𝒰' .. '𝒵' |
    '𝓐' .. '𝓟' |
    '𝓠' .. '𝓩' |
    '𝔄' .. '𝔏' |
    '𝔐' .. '𝔜' |
    '𝔸' .. '𝔾' |
    '𝕀' .. '𝕏' |
    '𝕐' .. '𝕐' |
    '𝕬' .. '𝕯' |
    '𝕰' .. '𝕿' |
    '𝖀' .. '𝖅' |
    '𝖠' .. '𝖯' |
    '𝖰' .. '𝖹' |
    '𝗔' .. '𝗟' |
    '𝗠' .. '𝗭' |
    '𝘈' .. '𝘏' |
    '𝘐' .. '𝘟' |
    '𝘠' .. '𝘡' |
    '𝘼' .. '𝘿' |
    '𝙀' .. '𝙏' |
    '𝙐' .. '𝙕' |
    '𝙰' .. '𝙿' |
    '𝚀' .. '𝚉' |
    '𝚨' .. '𝚯' |
    '𝚰' .. '𝚿' |
    '𝛀' .. '𝛀' |
    '𝛢' .. '𝛯' |
    '𝛰' .. '𝛺' |
    '𝜜' .. '𝜟' |
    '𝜠' .. '𝜯' |
    '𝜰' .. '𝜴' |
    '𝝖' .. '𝝟' |
    '𝝠' .. '𝝮' |
    '𝞐' .. '𝞟' |
    '𝞠' .. '𝞨' |
    '𝟊' .. '𝟊' |
    '𞤀' .. '𞤏' |
    '𞤐' .. '𞤟' |
    '𞤠' .. '𞤡'
}
Lt = {
    'ǅ' .. 'ǋ' |
    'ǲ' .. 'ǲ' |
    'ᾈ' .. 'ᾏ' |
    'ᾘ' .. 'ᾟ' |
    'ᾨ' .. 'ᾯ' |
    'ᾼ' .. 'ᾼ' |
    'ῌ' .. 'ῌ' |
    'ῼ' .. 'ῼ'
}
Lm = {
    'ᡃ' .. 'ᡃ' |
    'ⁱ' .. 'ⁿ' |
    'ₐ' .. 'ₜ' |
    '々' .. '々' |
    '〱' .. '〻' |
    'ゝ' .. 'ゞ' |
    'ʰ' .. 'ʿ' |
    'ˀ' .. 'ˏ' |
    'ː' .. 'ˑ' |
    'ˠ' .. 'ˮ' |
    'ʹ' .. 'ͺ' |
    'ՙ' .. 'ՙ' |
    'ـ' .. 'ـ' |
    'ۥ' .. 'ۦ' |
    'ߴ' .. 'ߺ' |
    'ࠚ' .. 'ࠚ' |
    'ࠤ' .. 'ࠨ' |
    'ॱ' .. 'ॱ' |
    'ๆ' .. 'ๆ' |
    'ໆ' .. 'ໆ' |
    'ჼ' .. 'ჼ' |
    'ៗ' .. 'ៗ' |
    'ᪧ' .. 'ᪧ' |
    'ᱸ' .. 'ᱽ' |
    'ᴬ' .. 'ᴯ' |
    'ᴰ' .. 'ᴿ' |
    'ᵀ' .. 'ᵏ' |
    'ᵐ' .. 'ᵟ' |
    'ᵠ' .. 'ᵪ' |
    'ᵸ' .. 'ᵸ' |
    'ᶛ' .. 'ᶟ' |
    'ᶠ' .. 'ᶯ' |
    'ᶰ' .. 'ᶿ' |
    'ⱼ' .. 'ⱽ' |
    'ⵯ' .. 'ⵯ' |
    'ⸯ' .. 'ⸯ' |
    'ー' .. 'ヾ' |
    'ꀕ' .. 'ꀕ' |
    'ꓸ' .. 'ꓽ' |
    'ꘌ' .. 'ꘌ' |
    'ꙿ' .. 'ꙿ' |
    'ꚜ' .. 'ꚝ' |
    'ꜗ' .. 'ꜟ' |
    'ꝰ' .. 'ꝰ' |
    'ꞈ' .. 'ꞈ' |
    'ꟸ' .. 'ꟹ' |
    'ꧏ' .. 'ꧏ' |
    'ꧦ' .. 'ꧦ' |
    'ꩰ' .. 'ꩰ' |
    'ꫝ' .. 'ꫝ' |
    'ꫳ' .. 'ꫴ' |
    'ꭜ' .. 'ꭟ' |
    'ｰ' .. 'ｰ' |
    'ﾞ' .. 'ﾟ' |
    '𖭀' .. '𖭃' |
    '𖾓' .. '𖾟' |
    '𖿠' .. '𖿡'
}
Lo = {
    'က' .. 'ဏ' |
    'တ' .. 'ဟ' |
    'ဠ' .. 'ဪ' |
    'ဿ' .. 'ဿ' |
    'ၐ' .. 'ၝ' |
    'ၡ' .. 'ၯ' |
    'ၰ' .. 'ၿ' |
    'ႀ' .. 'ႎ' |
    'ᄀ' .. 'ᄏ' |
    'ᄐ' .. 'ᄟ' |
    'ᄠ' .. 'ᄯ' |
    'ᄰ' .. 'ᄿ' |
    'ᅀ' .. 'ᅏ' |
    'ᅐ' .. 'ᅟ' |
    'ᅠ' .. 'ᅯ' |
    'ᅰ' .. 'ᅿ' |
    'ᆀ' .. 'ᆏ' |
    'ᆐ' .. 'ᆟ' |
    'ሀ' .. 'ሏ' |
    'ሐ' .. 'ሟ' |
    'ሠ' .. 'ሯ' |
    'ሰ' .. 'ሿ' |
    'ቀ' .. 'ቍ' |
    'ቐ' .. 'ቝ' |
    'በ' .. 'ቯ' |
    'ተ' .. 'ቿ' |
    'ኀ' .. 'ኍ' |
    'ነ' .. 'ኟ' |
    'ጀ' .. 'ጏ' |
    'ጐ' .. 'ጟ' |
    'ጠ' .. 'ጯ' |
    'ጰ' .. 'ጿ' |
    'ፀ' .. 'ፏ' |
    'ፐ' .. 'ፚ' |
    'ᎀ' .. 'ᎏ' |
    'ᐁ' .. 'ᐏ' |
    'ᐐ' .. 'ᐟ' |
    'ᐠ' .. 'ᐯ' |
    'ᐰ' .. 'ᐿ' |
    'ᑀ' .. 'ᑏ' |
    'ᑐ' .. 'ᑟ' |
    'ᑠ' .. 'ᑯ' |
    'ᑰ' .. 'ᑿ' |
    'ᒀ' .. 'ᒏ' |
    'ᒐ' .. 'ᒟ' |
    'ᔀ' .. 'ᔏ' |
    'ᔐ' .. 'ᔟ' |
    'ᔠ' .. 'ᔯ' |
    'ᔰ' .. 'ᔿ' |
    'ᕀ' .. 'ᕏ' |
    'ᕐ' .. 'ᕟ' |
    'ᕠ' .. 'ᕯ' |
    'ᕰ' .. 'ᕿ' |
    'ᖀ' .. 'ᖏ' |
    'ᖐ' .. 'ᖟ' |
    'ᘀ' .. 'ᘏ' |
    'ᘐ' .. 'ᘟ' |
    'ᘠ' .. 'ᘯ' |
    'ᘰ' .. 'ᘿ' |
    'ᙀ' .. 'ᙏ' |
    'ᙐ' .. 'ᙟ' |
    'ᙠ' .. 'ᙯ' |
    'ᙰ' .. 'ᙿ' |
    'ᚁ' .. 'ᚏ' |
    'ᚐ' .. 'ᚚ' |
    'ᜀ' .. 'ᜏ' |
    'ᜐ' .. 'ᜑ' |
    'ᜠ' .. 'ᜯ' |
    'ᜰ' .. 'ᜱ' |
    'ᝀ' .. 'ᝏ' |
    'ᝐ' .. 'ᝑ' |
    'ᝠ' .. 'ᝯ' |
    'ᝰ' .. 'ᝰ' |
    'ក' .. 'ត' |
    'ថ' .. 'ស' |
    'ᠠ' .. 'ᠯ' |
    'ᠰ' .. 'ᠿ' |
    'ᡀ' .. 'ᡏ' |
    'ᡐ' .. 'ᡟ' |
    'ᡠ' .. 'ᡯ' |
    'ᡰ' .. 'ᡸ' |
    'ᢀ' .. 'ᢏ' |
    'ᢐ' .. 'ᢟ' |
    'ᤀ' .. 'ᤏ' |
    'ᤐ' .. 'ᤞ' |
    'ᥐ' .. 'ᥟ' |
    'ᥠ' .. 'ᥭ' |
    'ᥰ' .. 'ᥴ' |
    'ᦀ' .. 'ᦏ' |
    'ᦐ' .. 'ᦟ' |
    'ℵ' .. 'ℸ' |
    '〆' .. '〆' |
    '〼' .. '〼' |
    'ぁ' .. 'く' |
    'ぐ' .. 'た' |
    'だ' .. 'は' |
    'ば' .. 'み' |
    'む' .. 'わ' |
    'ゐ' .. 'ゟ' |
    'ㄅ' .. 'ㄏ' |
    'ㄐ' .. 'ㄟ' |
    'ㄠ' .. 'ㄯ' |
    'ㄱ' .. 'ㄿ' |
    'ㅀ' .. 'ㅏ' |
    'ㅐ' .. 'ㅟ' |
    'ㅠ' .. 'ㅯ' |
    'ㅰ' .. 'ㅿ' |
    'ㆀ' .. 'ㆎ' |
    '㐀' .. '㐀' |
    '𐀀' .. '𐀏' |
    '𐀐' .. '𐀟' |
    '𐀠' .. '𐀯' |
    '𐀰' .. '𐀿' |
    '𐁀' .. '𐁍' |
    '𐁐' .. '𐁝' |
    '𐂀' .. '𐂏' |
    '𐂐' .. '𐂟' |
    '𐊀' .. '𐊏' |
    '𐊐' .. '𐊜' |
    '𐌀' .. '𐌏' |
    '𐌐' .. '𐌟' |
    '𐌭' .. '𐌯' |
    '𐌰' .. '𐌿' |
    '𐍀' .. '𐍉' |
    '𐍐' .. '𐍟' |
    '𐍠' .. '𐍯' |
    '𐍰' .. '𐍵' |
    '𐎀' .. '𐎏' |
    '𐎐' .. '𐎝' |
    '𐑐' .. '𐑟' |
    '𐑠' .. '𐑯' |
    '𐑰' .. '𐑿' |
    '𐒀' .. '𐒏' |
    '𐒐' .. '𐒝' |
    '𐔀' .. '𐔏' |
    '𐔐' .. '𐔟' |
    '𐔠' .. '𐔧' |
    '𐔰' .. '𐔿' |
    '𐕀' .. '𐕏' |
    '𐕐' .. '𐕟' |
    '𐕠' .. '𐕣' |
    '𐘀' .. '𐘏' |
    '𐘐' .. '𐘟' |
    '𐘠' .. '𐘯' |
    '𐘰' .. '𐘿' |
    '𐙀' .. '𐙏' |
    '𐙐' .. '𐙟' |
    '𐙠' .. '𐙯' |
    '𐙰' .. '𐙿' |
    '𐚀' .. '𐚏' |
    '𐚐' .. '𐚟' |
    '𐜀' .. '𐜏' |
    '𐜐' .. '𐜟' |
    '𐜠' .. '𐜯' |
    '𐜰' .. '𐜶' |
    '𐝀' .. '𐝏' |
    '𐝐' .. '𐝕' |
    '𐝠' .. '𐝧' |
    '𐠀' .. '𐠏' |
    '𐠐' .. '𐠟' |
    '𐠠' .. '𐠯' |
    '𐠰' .. '𐠿' |
    '𐡀' .. '𐡏' |
    '𐡐' .. '𐡕' |
    '𐡠' .. '𐡯' |
    '𐡰' .. '𐡶' |
    '𐢀' .. '𐢏' |
    '𐢐' .. '𐢞' |
    '𐤀' .. '𐤏' |
    '𐤐' .. '𐤕' |
    '𐤠' .. '𐤯' |
    '𐤰' .. '𐤹' |
    '𐦀' .. '𐦏' |
    '𐦐' .. '𐦟' |
    '𑀃' .. '𑀏' |
    '𑀐' .. '𑀟' |
    '𑀠' .. '𑀯' |
    '𑀰' .. '𑀷' |
    '𑂃' .. '𑂏' |
    '𑂐' .. '𑂟' |
    '𑄃' .. '𑄏' |
    '𑄐' .. '𑄟' |
    '𑄠' .. '𑄦' |
    '𑅄' .. '𑅄' |
    '𑅐' .. '𑅟' |
    '𑅠' .. '𑅯' |
    '𑅰' .. '𑅶' |
    '𑆃' .. '𑆏' |
    '𑆐' .. '𑆟' |
    '𑈀' .. '𑈏' |
    '𑈐' .. '𑈟' |
    '𑈠' .. '𑈫' |
    '𑊀' .. '𑊏' |
    '𑊐' .. '𑊟' |
    '𑌅' .. '𑌏' |
    '𑌐' .. '𑌟' |
    '𑌠' .. '𑌯' |
    '𑌰' .. '𑌽' |
    '𑍐' .. '𑍟' |
    '𑍠' .. '𑍡' |
    '𑐀' .. '𑐏' |
    '𑐐' .. '𑐟' |
    '𑐠' .. '𑐯' |
    '𑐰' .. '𑐴' |
    '𑑇' .. '𑑊' |
    '𑒀' .. '𑒏' |
    '𑒐' .. '𑒟' |
    '𑖀' .. '𑖏' |
    '𑖐' .. '𑖟' |
    '𑘀' .. '𑘏' |
    '𑘐' .. '𑘟' |
    '𑘠' .. '𑘯' |
    '𑙄' .. '𑙄' |
    '𑚀' .. '𑚏' |
    '𑚐' .. '𑚟' |
    '𑜀' .. '𑜏' |
    '𑜐' .. '𑜚' |
    '𑠀' .. '𑠏' |
    '𑠐' .. '𑠟' |
    '𑠠' .. '𑠫' |
    '𒀀' .. '𒀏' |
    '𒀐' .. '𒀟' |
    '𒀠' .. '𒀯' |
    '𒀰' .. '𒀿' |
    '𒁀' .. '𒁏' |
    '𒁐' .. '𒁟' |
    '𒁠' .. '𒁯' |
    '𒁰' .. '𒁿' |
    '𒂀' .. '𒂏' |
    '𒂐' .. '𒂟' |
    '𒄀' .. '𒄏' |
    '𒄐' .. '𒄟' |
    '𒄠' .. '𒄯' |
    '𒄰' .. '𒄿' |
    '𒅀' .. '𒅏' |
    '𒅐' .. '𒅟' |
    '𒅠' .. '𒅯' |
    '𒅰' .. '𒅿' |
    '𒆀' .. '𒆏' |
    '𒆐' .. '𒆟' |
    '𒈀' .. '𒈏' |
    '𒈐' .. '𒈟' |
    '𒈠' .. '𒈯' |
    '𒈰' .. '𒈿' |
    '𒉀' .. '𒉏' |
    '𒉐' .. '𒉟' |
    '𒉠' .. '𒉯' |
    '𒉰' .. '𒉿' |
    '𒊀' .. '𒊏' |
    '𒊐' .. '𒊟' |
    '𒌀' .. '𒌏' |
    '𒌐' .. '𒌟' |
    '𒌠' .. '𒌯' |
    '𒌰' .. '𒌿' |
    '𒍀' .. '𒍏' |
    '𒍐' .. '𒍟' |
    '𒍠' .. '𒍯' |
    '𒍰' .. '𒍿' |
    '𒎀' .. '𒎏' |
    '𒎐' .. '𒎙' |
    '𒒀' .. '𒒏' |
    '𒒐' .. '𒒟' |
    '𒔀' .. '𒔏' |
    '𒔐' .. '𒔟' |
    '𒔠' .. '𒔯' |
    '𒔰' .. '𒔿' |
    '𒕀' .. '𒕃' |
    '𓀀' .. '𓀏' |
    '𓀐' .. '𓀟' |
    '𓀠' .. '𓀯' |
    '𓀰' .. '𓀿' |
    '𓁀' .. '𓁏' |
    '𓁐' .. '𓁟' |
    '𓁠' .. '𓁯' |
    '𓁰' .. '𓁿' |
    '𓂀' .. '𓂏' |
    '𓂐' .. '𓂟' |
    '𓄀' .. '𓄏' |
    '𓄐' .. '𓄟' |
    '𓄠' .. '𓄯' |
    '𓄰' .. '𓄿' |
    '𓅀' .. '𓅏' |
    '𓅐' .. '𓅟' |
    '𓅠' .. '𓅯' |
    '𓅰' .. '𓅿' |
    '𓆀' .. '𓆏' |
    '𓆐' .. '𓆟' |
    '𓈀' .. '𓈏' |
    '𓈐' .. '𓈟' |
    '𓈠' .. '𓈯' |
    '𓈰' .. '𓈿' |
    '𓉀' .. '𓉏' |
    '𓉐' .. '𓉟' |
    '𓉠' .. '𓉯' |
    '𓉰' .. '𓉿' |
    '𓊀' .. '𓊏' |
    '𓊐' .. '𓊟' |
    '𓌀' .. '𓌏' |
    '𓌐' .. '𓌟' |
    '𓌠' .. '𓌯' |
    '𓌰' .. '𓌿' |
    '𓍀' .. '𓍏' |
    '𓍐' .. '𓍟' |
    '𓍠' .. '𓍯' |
    '𓍰' .. '𓍿' |
    '𓎀' .. '𓎏' |
    '𓎐' .. '𓎟' |
    '𓐀' .. '𓐏' |
    '𓐐' .. '𓐟' |
    '𓐠' .. '𓐮' |
    '𔐀' .. '𔐏' |
    '𔐐' .. '𔐟' |
    '𔐠' .. '𔐯' |
    '𔐰' .. '𔐿' |
    '𔑀' .. '𔑏' |
    '𔑐' .. '𔑟' |
    '𔑠' .. '𔑯' |
    '𔑰' .. '𔑿' |
    '𔒀' .. '𔒏' |
    '𔒐' .. '𔒟' |
    '𔔀' .. '𔔏' |
    '𔔐' .. '𔔟' |
    '𔔠' .. '𔔯' |
    '𔔰' .. '𔔿' |
    '𔕀' .. '𔕏' |
    '𔕐' .. '𔕟' |
    '𔕠' .. '𔕯' |
    '𔕰' .. '𔕿' |
    '𔖀' .. '𔖏' |
    '𔖐' .. '𔖟' |
    '𔘀' .. '𔘏' |
    '𔘐' .. '𔘟' |
    '𔘠' .. '𔘯' |
    '𔘰' .. '𔘿' |
    '𔙀' .. '𔙆' |
    '𖠀' .. '𖠏' |
    '𖠐' .. '𖠟' |
    '𖠠' .. '𖠯' |
    '𖠰' .. '𖠿' |
    '𖡀' .. '𖡏' |
    '𖡐' .. '𖡟' |
    '𖡠' .. '𖡯' |
    '𖡰' .. '𖡿' |
    '𖢀' .. '𖢏' |
    '𖢐' .. '𖢟' |
    '𖤀' .. '𖤏' |
    '𖤐' .. '𖤟' |
    '𖤠' .. '𖤯' |
    '𖤰' .. '𖤿' |
    '𖥀' .. '𖥏' |
    '𖥐' .. '𖥟' |
    '𖥠' .. '𖥯' |
    '𖥰' .. '𖥿' |
    '𖦀' .. '𖦏' |
    '𖦐' .. '𖦟' |
    'ª' .. 'ª' |
    'º' .. 'º' |
    'ƻ' .. 'ƻ' |
    'ǀ' .. 'ǃ' |
    'ʔ' .. 'ʔ' |
    'א' .. 'ן' |
    'נ' .. 'ׯ' |
    'װ' .. 'ײ' |
    'ؠ' .. 'د' |
    'ذ' .. 'ؿ' |
    'ف' .. 'ي' |
    'ٮ' .. 'ٯ' |
    'ٱ' .. 'ٿ' |
    'ڀ' .. 'ڏ' |
    'ڐ' .. 'ڟ' |
    'ڠ' .. 'گ' |
    'ڰ' .. 'ڿ' |
    'ۀ' .. 'ۏ' |
    'ې' .. 'ە' |
    'ۮ' .. 'ۯ' |
    'ۺ' .. 'ۿ' |
    'ܐ' .. 'ܟ' |
    'ܠ' .. 'ܯ' |
    'ݍ' .. 'ݏ' |
    'ݐ' .. 'ݟ' |
    'ݠ' .. 'ݯ' |
    'ݰ' .. 'ݿ' |
    'ހ' .. 'ޏ' |
    'ސ' .. 'ޟ' |
    'ޠ' .. 'ޥ' |
    'ޱ' .. 'ޱ' |
    'ߊ' .. 'ߏ' |
    'ߐ' .. 'ߟ' |
    'ߠ' .. 'ߪ' |
    'ࠀ' .. 'ࠏ' |
    'ࠐ' .. 'ࠕ' |
    'ࡀ' .. 'ࡏ' |
    'ࡐ' .. 'ࡘ' |
    'ࡠ' .. 'ࡪ' |
    'ࢠ' .. 'ࢯ' |
    'ࢰ' .. 'ࢽ' |
    'ऄ' .. 'ए' |
    'ऐ' .. 'ट' |
    'ठ' .. 'य' |
    'र' .. 'ऽ' |
    'ॐ' .. 'य़' |
    'ॠ' .. 'ॡ' |
    'ॲ' .. 'ॿ' |
    'ঀ' .. 'এ' |
    'ঐ' .. 'ট' |
    'ঠ' .. 'য' |
    'র' .. 'ঽ' |
    'ৎ' .. 'ৎ' |
    'ড়' .. 'য়' |
    'ৠ' .. 'ৡ' |
    'ৰ' .. 'ৼ' |
    'ਅ' .. 'ਏ' |
    'ਐ' .. 'ਟ' |
    'ਠ' .. 'ਯ' |
    'ਰ' .. 'ਹ' |
    'ਖ਼' .. 'ਫ਼' |
    'ੲ' .. 'ੴ' |
    'અ' .. 'એ' |
    'ઐ' .. 'ટ' |
    'ઠ' .. 'ય' |
    'ર' .. 'ઽ' |
    'ૐ' .. 'ૐ' |
    'ૠ' .. 'ૡ' |
    'ૹ' .. 'ૹ' |
    'ଅ' .. 'ଏ' |
    'ଐ' .. 'ଟ' |
    'ଠ' .. 'ଯ' |
    'ର' .. 'ଽ' |
    'ଡ଼' .. 'ୟ' |
    'ୠ' .. 'ୡ' |
    'ୱ' .. 'ୱ' |
    'ஃ' .. 'ஏ' |
    'ஐ' .. 'ட' |
    'ண' .. 'ய' |
    'ர' .. 'ஹ' |
    'ௐ' .. 'ௐ' |
    'అ' .. 'ఏ' |
    'ఐ' .. 'ట' |
    'ఠ' .. 'య' |
    'ర' .. 'ఽ' |
    'ౘ' .. 'ౚ' |
    'ౠ' .. 'ౡ' |
    'ಀ' .. 'ಏ' |
    'ಐ' .. 'ಟ' |
    'ಠ' .. 'ಯ' |
    'ರ' .. 'ಽ' |
    'ೞ' .. 'ೞ' |
    'ೠ' .. 'ೡ' |
    'ೱ' .. 'ೲ' |
    'അ' .. 'ഏ' |
    'ഐ' .. 'ട' |
    'ഠ' .. 'യ' |
    'ര' .. 'ഽ' |
    'ൎ' .. 'ൎ' |
    'ൔ' .. 'ൟ' |
    'ൠ' .. 'ൡ' |
    'ൺ' .. 'ൿ' |
    'අ' .. 'ඏ' |
    'ඐ' .. 'ඟ' |
    'ච' .. 'ද' |
    'ධ' .. 'ල' |
    'ව' .. 'ෆ' |
    'ก' .. 'ฏ' |
    'ฐ' .. 'ฟ' |
    'ภ' .. 'ฯ' |
    'ะ' .. 'ำ' |
    'เ' .. 'ๅ' |
    'ກ' .. 'ຍ' |
    'ດ' .. 'ຟ' |
    'ມ' .. 'ຯ' |
    'ະ' .. 'ຽ' |
    'ເ' .. 'ໄ' |
    'ໜ' .. 'ໟ' |
    'ༀ' .. 'ༀ' |
    'ཀ' .. 'ཏ' |
    'ཐ' .. 'ཟ' |
    'འ' .. 'ཬ' |
    'ྈ' .. 'ྌ' |
    'ᆠ' .. 'ᆯ' |
    'ᆰ' .. 'ᆿ' |
    'ᇀ' .. 'ᇏ' |
    'ᇐ' .. 'ᇟ' |
    'ᇠ' .. 'ᇯ' |
    'ᇰ' .. 'ᇿ' |
    'አ' .. 'ኯ' |
    'ኰ' .. 'ኾ' |
    'ዀ' .. 'ዏ' |
    'ዐ' .. 'ዟ' |
    'ዠ' .. 'ዯ' |
    'ደ' .. 'ዿ' |
    'ᒠ' .. 'ᒯ' |
    'ᒰ' .. 'ᒿ' |
    'ᓀ' .. 'ᓏ' |
    'ᓐ' .. 'ᓟ' |
    'ᓠ' .. 'ᓯ' |
    'ᓰ' .. 'ᓿ' |
    'ᖠ' .. 'ᖯ' |
    'ᖰ' .. 'ᖿ' |
    'ᗀ' .. 'ᗏ' |
    'ᗐ' .. 'ᗟ' |
    'ᗠ' .. 'ᗯ' |
    'ᗰ' .. 'ᗿ' |
    'ᚠ' .. 'ᚯ' |
    'ᚰ' .. 'ᚿ' |
    'ᛀ' .. 'ᛏ' |
    'ᛐ' .. 'ᛟ' |
    'ᛠ' .. 'ᛪ' |
    'ᛱ' .. 'ᛸ' |
    'ហ' .. 'ឯ' |
    'ឰ' .. 'ឳ' |
    'ៜ' .. 'ៜ' |
    'ᢠ' .. 'ᢪ' |
    'ᢰ' .. 'ᢿ' |
    'ᣀ' .. 'ᣏ' |
    'ᣐ' .. 'ᣟ' |
    'ᣠ' .. 'ᣯ' |
    'ᣰ' .. 'ᣵ' |
    'ᦠ' .. 'ᦫ' |
    'ᦰ' .. 'ᦿ' |
    'ᧀ' .. 'ᧉ' |
    'ᨀ' .. 'ᨏ' |
    'ᨐ' .. 'ᨖ' |
    'ᨠ' .. 'ᨯ' |
    'ᨰ' .. 'ᨿ' |
    'ᩀ' .. 'ᩏ' |
    'ᩐ' .. 'ᩔ' |
    'ᬅ' .. 'ᬏ' |
    'ᬐ' .. 'ᬟ' |
    'ᬠ' .. 'ᬯ' |
    'ᬰ' .. 'ᬳ' |
    'ᭅ' .. 'ᭋ' |
    'ᮃ' .. 'ᮏ' |
    'ᮐ' .. 'ᮟ' |
    'ᮠ' .. 'ᮯ' |
    'ᮺ' .. 'ᮿ' |
    'ᯀ' .. 'ᯏ' |
    'ᯐ' .. 'ᯟ' |
    'ᯠ' .. 'ᯥ' |
    'ᰀ' .. 'ᰏ' |
    'ᰐ' .. 'ᰟ' |
    'ᰠ' .. 'ᰣ' |
    'ᱍ' .. 'ᱏ' |
    'ᱚ' .. 'ᱟ' |
    'ᱠ' .. 'ᱯ' |
    'ᱰ' .. 'ᱷ' |
    'ᳩ' .. 'ᳯ' |
    'ᳰ' .. 'ᳶ' |
    'ⴰ' .. 'ⴿ' |
    'ⵀ' .. 'ⵏ' |
    'ⵐ' .. 'ⵟ' |
    'ⵠ' .. 'ⵧ' |
    'ⶀ' .. 'ⶏ' |
    'ⶐ' .. 'ⶖ' |
    'ⶠ' .. 'ⶮ' |
    'ⶰ' .. 'ⶾ' |
    'ⷀ' .. 'ⷎ' |
    'ⷐ' .. 'ⷞ' |
    'ァ' .. 'ク' |
    'グ' .. 'タ' |
    'ダ' .. 'ハ' |
    'バ' .. 'ミ' |
    'ム' .. 'ワ' |
    'ヰ' .. 'ヿ' |
    'ㆠ' .. 'ㆯ' |
    'ㆰ' .. 'ㆺ' |
    'ㇰ' .. 'ㇿ' |
    '䶵' .. '䶵' |
    '一' .. '一' |
    '鿯' .. '鿯' |
    'ꀀ' .. 'ꀏ' |
    'ꀐ' .. 'ꀟ' |
    'ꀠ' .. 'ꀯ' |
    'ꀰ' .. 'ꀿ' |
    'ꁀ' .. 'ꁏ' |
    'ꁐ' .. 'ꁟ' |
    'ꁠ' .. 'ꁯ' |
    'ꁰ' .. 'ꁿ' |
    'ꂀ' .. 'ꂏ' |
    'ꂐ' .. 'ꂟ' |
    'ꂠ' .. 'ꂯ' |
    'ꂰ' .. 'ꂿ' |
    'ꃀ' .. 'ꃏ' |
    'ꃐ' .. 'ꃟ' |
    'ꃠ' .. 'ꃯ' |
    'ꃰ' .. 'ꃿ' |
    'ꄀ' .. 'ꄏ' |
    'ꄐ' .. 'ꄟ' |
    'ꄠ' .. 'ꄯ' |
    'ꄰ' .. 'ꄿ' |
    'ꅀ' .. 'ꅏ' |
    'ꅐ' .. 'ꅟ' |
    'ꅠ' .. 'ꅯ' |
    'ꅰ' .. 'ꅿ' |
    'ꆀ' .. 'ꆏ' |
    'ꆐ' .. 'ꆟ' |
    'ꆠ' .. 'ꆯ' |
    'ꆰ' .. 'ꆿ' |
    'ꇀ' .. 'ꇏ' |
    'ꇐ' .. 'ꇟ' |
    'ꇠ' .. 'ꇯ' |
    'ꇰ' .. 'ꇿ' |
    'ꈀ' .. 'ꈏ' |
    'ꈐ' .. 'ꈟ' |
    'ꈠ' .. 'ꈯ' |
    'ꈰ' .. 'ꈿ' |
    'ꉀ' .. 'ꉏ' |
    'ꉐ' .. 'ꉟ' |
    'ꉠ' .. 'ꉯ' |
    'ꉰ' .. 'ꉿ' |
    'ꊀ' .. 'ꊏ' |
    'ꊐ' .. 'ꊟ' |
    'ꊠ' .. 'ꊯ' |
    'ꊰ' .. 'ꊿ' |
    'ꋀ' .. 'ꋏ' |
    'ꋐ' .. 'ꋟ' |
    'ꋠ' .. 'ꋯ' |
    'ꋰ' .. 'ꋿ' |
    'ꌀ' .. 'ꌏ' |
    'ꌐ' .. 'ꌟ' |
    'ꌠ' .. 'ꌯ' |
    'ꌰ' .. 'ꌿ' |
    'ꍀ' .. 'ꍏ' |
    'ꍐ' .. 'ꍟ' |
    'ꍠ' .. 'ꍯ' |
    'ꍰ' .. 'ꍿ' |
    'ꎀ' .. 'ꎏ' |
    'ꎐ' .. 'ꎟ' |
    'ꎠ' .. 'ꎯ' |
    'ꎰ' .. 'ꎿ' |
    'ꏀ' .. 'ꏏ' |
    'ꏐ' .. 'ꏟ' |
    'ꏠ' .. 'ꏯ' |
    'ꏰ' .. 'ꏿ' |
    'ꐀ' .. 'ꐏ' |
    'ꐐ' .. 'ꐟ' |
    'ꐠ' .. 'ꐯ' |
    'ꐰ' .. 'ꐿ' |
    'ꑀ' .. 'ꑏ' |
    'ꑐ' .. 'ꑟ' |
    'ꑠ' .. 'ꑯ' |
    'ꑰ' .. 'ꑿ' |
    'ꒀ' .. 'ꒌ' |
    'ꓐ' .. 'ꓟ' |
    'ꓠ' .. 'ꓯ' |
    'ꓰ' .. 'ꓷ' |
    'ꔀ' .. 'ꔏ' |
    'ꔐ' .. 'ꔟ' |
    'ꔠ' .. 'ꔯ' |
    'ꔰ' .. 'ꔿ' |
    'ꕀ' .. 'ꕏ' |
    'ꕐ' .. 'ꕟ' |
    'ꕠ' .. 'ꕯ' |
    'ꕰ' .. 'ꕿ' |
    'ꖀ' .. 'ꖏ' |
    'ꖐ' .. 'ꖟ' |
    'ꖠ' .. 'ꖯ' |
    'ꖰ' .. 'ꖿ' |
    'ꗀ' .. 'ꗏ' |
    'ꗐ' .. 'ꗟ' |
    'ꗠ' .. 'ꗯ' |
    'ꗰ' .. 'ꗿ' |
    'ꘀ' .. 'ꘋ' |
    'ꘐ' .. 'ꘟ' |
    'ꘪ' .. 'ꘫ' |
    'ꙮ' .. 'ꙮ' |
    'ꚠ' .. 'ꚯ' |
    'ꚰ' .. 'ꚿ' |
    'ꛀ' .. 'ꛏ' |
    'ꛐ' .. 'ꛟ' |
    'ꛠ' .. 'ꛥ' |
    'ꞏ' .. 'ꞏ' |
    'ꟷ' .. 'ꟿ' |
    'ꠀ' .. 'ꠏ' |
    'ꠐ' .. 'ꠟ' |
    'ꠠ' .. 'ꠢ' |
    'ꡀ' .. 'ꡏ' |
    'ꡐ' .. 'ꡟ' |
    'ꡠ' .. 'ꡯ' |
    'ꡰ' .. 'ꡳ' |
    'ꢂ' .. 'ꢏ' |
    'ꢐ' .. 'ꢟ' |
    'ꢠ' .. 'ꢯ' |
    'ꢰ' .. 'ꢳ' |
    'ꣲ' .. 'ꣾ' |
    'ꤊ' .. 'ꤏ' |
    'ꤐ' .. 'ꤟ' |
    'ꤠ' .. 'ꤥ' |
    'ꤰ' .. 'ꤿ' |
    'ꥀ' .. 'ꥆ' |
    'ꥠ' .. 'ꥯ' |
    'ꥰ' .. 'ꥼ' |
    'ꦄ' .. 'ꦏ' |
    'ꦐ' .. 'ꦟ' |
    'ꦠ' .. 'ꦯ' |
    'ꦰ' .. 'ꦲ' |
    'ꧠ' .. 'ꧯ' |
    'ꧺ' .. 'ꧾ' |
    'ꨀ' .. 'ꨏ' |
    'ꨐ' .. 'ꨟ' |
    'ꨠ' .. 'ꨨ' |
    'ꩀ' .. 'ꩋ' |
    'ꩠ' .. 'ꩯ' |
    'ꩱ' .. 'ꩿ' |
    'ꪀ' .. 'ꪏ' |
    'ꪐ' .. 'ꪟ' |
    'ꪠ' .. 'ꪯ' |
    'ꪱ' .. 'ꪽ' |
    'ꫀ' .. 'ꫂ' |
    'ꫛ' .. 'ꫜ' |
    'ꫠ' .. 'ꫪ' |
    'ꫲ' .. 'ꫲ' |
    'ꬁ' .. 'ꬎ' |
    'ꬑ' .. 'ꬖ' |
    'ꬠ' .. 'ꬮ' |
    'ꯀ' .. 'ꯏ' |
    'ꯐ' .. 'ꯟ' |
    'ꯠ' .. 'ꯢ' |
    '가' .. '가' |
    '힣' .. '힣' |
    'ힰ' .. 'ힿ' |
    'ퟀ' .. 'ퟏ' |
    'ퟐ' .. 'ퟟ' |
    'ퟠ' .. 'ퟯ' |
    'ퟰ' .. 'ퟻ' |
    '豈' .. '羅' |
    '蘿' .. '蘭' |
    '鸞' .. '勞' |
    '擄' .. '錄' |
    '鹿' .. '累' |
    '縷' .. '寧' |
    '怒' .. '說' |
    '殺' .. '勵' |
    '呂' .. '憐' |
    '戀' .. '烈' |
    '裂' .. '羚' |
    '聆' .. '樂' |
    '燎' .. '紐' |
    '類' .. '履' |
    '易' .. '璘' |
    '藺' .. '刺' |
    '切' .. '﨏' |
    '塚' .. '﨟' |
    '蘒' .. '隷' |
    '侮' .. '憎' |
    '懲' .. '祐' |
    '祖' .. '著' |
    '褐' .. '舘' |
    '並' .. '奔' |
    '婢' .. '摒' |
    '敖' .. '犯' |
    '猪' .. '絛' |
    '練' .. '謹' |
    '變' .. '𢡊' |
    '𢡄' .. '龎' |
    'יִ' .. 'ײַ' |
    'ﬠ' .. 'אָ' |
    'אּ' .. 'מּ' |
    'נּ' .. 'ﭏ' |
    'ﭐ' .. 'ﭟ' |
    'ﭠ' .. 'ﭯ' |
    'ﭰ' .. 'ﭿ' |
    'ﮀ' .. 'ﮏ' |
    'ﮐ' .. 'ﮟ' |
    'ﮠ' .. 'ﮯ' |
    'ﮰ' .. 'ﮱ' |
    'ﯓ' .. 'ﯟ' |
    'ﯠ' .. 'ﯯ' |
    'ﯰ' .. 'ﯿ' |
    'ﰀ' .. 'ﰏ' |
    'ﰐ' .. 'ﰟ' |
    'ﰠ' .. 'ﰯ' |
    'ﰰ' .. 'ﰿ' |
    'ﱀ' .. 'ﱏ' |
    'ﱐ' .. 'ﱟ' |
    'ﱠ' .. 'ﱯ' |
    'ﱰ' .. 'ﱿ' |
    'ﲀ' .. 'ﲏ' |
    'ﲐ' .. 'ﲟ' |
    'ﲠ' .. 'ﲯ' |
    'ﲰ' .. 'ﲿ' |
    'ﳀ' .. 'ﳏ' |
    'ﳐ' .. 'ﳟ' |
    'ﳠ' .. 'ﳯ' |
    'ﳰ' .. 'ﳿ' |
    'ﴀ' .. 'ﴏ' |
    'ﴐ' .. 'ﴟ' |
    'ﴠ' .. 'ﴯ' |
    'ﴰ' .. 'ﴽ' |
    'ﵐ' .. 'ﵟ' |
    'ﵠ' .. 'ﵯ' |
    'ﵰ' .. 'ﵿ' |
    'ﶀ' .. 'ﶏ' |
    'ﶒ' .. 'ﶟ' |
    'ﶠ' .. 'ﶯ' |
    'ﶰ' .. 'ﶿ' |
    'ﷀ' .. 'ﷇ' |
    'ﷰ' .. 'ﷻ' |
    'ﹰ' .. 'ﹿ' |
    'ﺀ' .. 'ﺏ' |
    'ﺐ' .. 'ﺟ' |
    'ﺠ' .. 'ﺯ' |
    'ﺰ' .. 'ﺿ' |
    'ﻀ' .. 'ﻏ' |
    'ﻐ' .. 'ﻟ' |
    'ﻠ' .. 'ﻯ' |
    'ﻰ' .. 'ﻼ' |
    'ｦ' .. 'ｯ' |
    'ｱ' .. 'ｿ' |
    'ﾀ' .. 'ﾏ' |
    'ﾐ' .. 'ﾝ' |
    'ﾠ' .. 'ﾯ' |
    'ﾰ' .. 'ﾾ' |
    'ￂ' .. 'ￏ' |
    'ￒ' .. 'ￜ' |
    '𐂠' .. '𐂯' |
    '𐂰' .. '𐂿' |
    '𐃀' .. '𐃏' |
    '𐃐' .. '𐃟' |
    '𐃠' .. '𐃯' |
    '𐃰' .. '𐃺' |
    '𐊠' .. '𐊯' |
    '𐊰' .. '𐊿' |
    '𐋀' .. '𐋏' |
    '𐋐' .. '𐋐' |
    '𐎠' .. '𐎯' |
    '𐎰' .. '𐎿' |
    '𐏀' .. '𐏏' |
    '𐚠' .. '𐚯' |
    '𐚰' .. '𐚿' |
    '𐛀' .. '𐛏' |
    '𐛐' .. '𐛟' |
    '𐛠' .. '𐛯' |
    '𐛰' .. '𐛿' |
    '𐣠' .. '𐣯' |
    '𐣰' .. '𐣵' |
    '𐦠' .. '𐦯' |
    '𐦰' .. '𐦿' |
    '𐨀' .. '𐨀' |
    '𐨐' .. '𐨟' |
    '𐨠' .. '𐨯' |
    '𐨰' .. '𐨵' |
    '𐩠' .. '𐩯' |
    '𐩰' .. '𐩼' |
    '𐪀' .. '𐪏' |
    '𐪐' .. '𐪜' |
    '𐫀' .. '𐫏' |
    '𐫐' .. '𐫟' |
    '𐫠' .. '𐫤' |
    '𐬀' .. '𐬏' |
    '𐬐' .. '𐬟' |
    '𐬠' .. '𐬯' |
    '𐬰' .. '𐬵' |
    '𐭀' .. '𐭏' |
    '𐭐' .. '𐭕' |
    '𐭠' .. '𐭯' |
    '𐭰' .. '𐭲' |
    '𐮀' .. '𐮏' |
    '𐮐' .. '𐮑' |
    '𐰀' .. '𐰏' |
    '𐰐' .. '𐰟' |
    '𐰠' .. '𐰯' |
    '𐰰' .. '𐰿' |
    '𐱀' .. '𐱈' |
    '𐴀' .. '𐴏' |
    '𐴐' .. '𐴟' |
    '𐴠' .. '𐴣' |
    '𐼀' .. '𐼏' |
    '𐼐' .. '𐼜' |
    '𐼧' .. '𐼧' |
    '𐼰' .. '𐼿' |
    '𐽀' .. '𐽅' |
    '𑂠' .. '𑂯' |
    '𑃐' .. '𑃟' |
    '𑃠' .. '𑃨' |
    '𑆠' .. '𑆯' |
    '𑆰' .. '𑆲' |
    '𑇁' .. '𑇄' |
    '𑇚' .. '𑇜' |
    '𑊠' .. '𑊨' |
    '𑊰' .. '𑊿' |
    '𑋀' .. '𑋏' |
    '𑋐' .. '𑋞' |
    '𑒠' .. '𑒯' |
    '𑓄' .. '𑓇' |
    '𑖠' .. '𑖮' |
    '𑗘' .. '𑗛' |
    '𑚠' .. '𑚪' |
    '𑣿' .. '𑣿' |
    '𑨀' .. '𑨏' |
    '𑨐' .. '𑨟' |
    '𑨠' .. '𑨯' |
    '𑨰' .. '𑨺' |
    '𑩐' .. '𑩟' |
    '𑩠' .. '𑩯' |
    '𑩰' .. '𑩿' |
    '𑪀' .. '𑪉' |
    '𑪝' .. '𑪝' |
    '𑫀' .. '𑫏' |
    '𑫐' .. '𑫟' |
    '𑫠' .. '𑫯' |
    '𑫰' .. '𑫸' |
    '𑰀' .. '𑰏' |
    '𑰐' .. '𑰟' |
    '𑰠' .. '𑰮' |
    '𑱀' .. '𑱀' |
    '𑱲' .. '𑱿' |
    '𑲀' .. '𑲏' |
    '𑴀' .. '𑴏' |
    '𑴐' .. '𑴟' |
    '𑴠' .. '𑴯' |
    '𑴰' .. '𑴰' |
    '𑵆' .. '𑵆' |
    '𑵠' .. '𑵯' |
    '𑵰' .. '𑵿' |
    '𑶀' .. '𑶉' |
    '𑶘' .. '𑶘' |
    '𑻠' .. '𑻯' |
    '𑻰' .. '𑻲' |
    '𒂠' .. '𒂯' |
    '𒂰' .. '𒂿' |
    '𒃀' .. '𒃏' |
    '𒃐' .. '𒃟' |
    '𒃠' .. '𒃯' |
    '𒃰' .. '𒃿' |
    '𒆠' .. '𒆯' |
    '𒆰' .. '𒆿' |
    '𒇀' .. '𒇏' |
    '𒇐' .. '𒇟' |
    '𒇠' .. '𒇯' |
    '𒇰' .. '𒇿' |
    '𒊠' .. '𒊯' |
    '𒊰' .. '𒊿' |
    '𒋀' .. '𒋏' |
    '𒋐' .. '𒋟' |
    '𒋠' .. '𒋯' |
    '𒋰' .. '𒋿' |
    '𒒠' .. '𒒯' |
    '𒒰' .. '𒒿' |
    '𒓀' .. '𒓏' |
    '𒓐' .. '𒓟' |
    '𒓠' .. '𒓯' |
    '𒓰' .. '𒓿' |
    '𓂠' .. '𓂯' |
    '𓂰' .. '𓂿' |
    '𓃀' .. '𓃏' |
    '𓃐' .. '𓃟' |
    '𓃠' .. '𓃯' |
    '𓃰' .. '𓃿' |
    '𓆠' .. '𓆯' |
    '𓆰' .. '𓆿' |
    '𓇀' .. '𓇏' |
    '𓇐' .. '𓇟' |
    '𓇠' .. '𓇯' |
    '𓇰' .. '𓇿' |
    '𓊠' .. '𓊯' |
    '𓊰' .. '𓊿' |
    '𓋀' .. '𓋏' |
    '𓋐' .. '𓋟' |
    '𓋠' .. '𓋯' |
    '𓋰' .. '𓋿' |
    '𓎠' .. '𓎯' |
    '𓎰' .. '𓎿' |
    '𓏀' .. '𓏏' |
    '𓏐' .. '𓏟' |
    '𓏠' .. '𓏯' |
    '𓏰' .. '𓏿' |
    '𔒠' .. '𔒯' |
    '𔒰' .. '𔒿' |
    '𔓀' .. '𔓏' |
    '𔓐' .. '𔓟' |
    '𔓠' .. '𔓯' |
    '𔓰' .. '𔓿' |
    '𔖠' .. '𔖯' |
    '𔖰' .. '𔖿' |
    '𔗀' .. '𔗏' |
    '𔗐' .. '𔗟' |
    '𔗠' .. '𔗯' |
    '𔗰' .. '𔗿' |
    '𖢠' .. '𖢯' |
    '𖢰' .. '𖢿' |
    '𖣀' .. '𖣏' |
    '𖣐' .. '𖣟' |
    '𖣠' .. '𖣯' |
    '𖣰' .. '𖣿' |
    '𖦠' .. '𖦯' |
    '𖦰' .. '𖦿' |
    '𖧀' .. '𖧏' |
    '𖧐' .. '𖧟'
}
Nl = {
    'Ⅰ' .. 'Ⅿ' |
    'ⅰ' .. 'ⅿ' |
    'ↀ' .. 'ↈ' |
    '〇' .. '〇' |
    '〡' .. '〩' |
    '〸' .. '〺' |
    '𐅀' .. '𐅏' |
    '𐅐' .. '𐅟' |
    '𐅠' .. '𐅯' |
    '𐅰' .. '𐅴' |
    '𐍁' .. '𐍊' |
    '𒐀' .. '𒐏' |
    '𒐐' .. '𒐟' |
    '𒐠' .. '𒐯' |
    '𒐰' .. '𒐿' |
    '𒑀' .. '𒑏' |
    '𒑐' .. '𒑟' |
    '𒑠' .. '𒑮' |
    'ᛮ' .. 'ᛯ' |
    'ᛰ' .. 'ᛰ' |
    'ꛦ' .. 'ꛯ' |
    '𐏑' .. '𐏕'
}
Zs = {
    ' ' .. ' ' |
    ' ' .. ' ' |
    ' ' .. ' ' |
    ' ' .. ' ' |
    '　' .. '　' |
    ' ' .. ' ' |
    ' ' .. ' '
}
Pc = {
    '‿' .. '‿' |
    '⁀' .. '⁀' |
    '⁔' .. '⁔' |
    '_' .. '_' |
    '︳' .. '︴' |
    '﹍' .. '﹏' |
    '＿' .. '＿'
}
Nd = {
    '၀' .. '၉' |
    '႐' .. '႙' |
    '᠐' .. '᠙' |
    '᥆' .. '᥏' |
    '𑁦' .. '𑁯' |
    '𑄶' .. '𑄿' |
    '𑑐' .. '𑑙' |
    '𑙐' .. '𑙙' |
    '𑜰' .. '𑜹' |
    '0' .. '9' |
    '٠' .. '٩' |
    '۰' .. '۹' |
    '߀' .. '߉' |
    '०' .. '९' |
    '০' .. '৯' |
    '੦' .. '੯' |
    '૦' .. '૯' |
    '୦' .. '୯' |
    '௦' .. '௯' |
    '౦' .. '౯' |
    '೦' .. '೯' |
    '൦' .. '൯' |
    '෦' .. '෯' |
    '๐' .. '๙' |
    '໐' .. '໙' |
    '༠' .. '༩' |
    '០' .. '៩' |
    '᧐' .. '᧙' |
    '᪀' .. '᪉' |
    '᪐' .. '᪙' |
    '᭐' .. '᭙' |
    '᮰' .. '᮹' |
    '᱀' .. '᱉' |
    '᱐' .. '᱙' |
    '꘠' .. '꘩' |
    '꣐' .. '꣙' |
    '꤀' .. '꤉' |
    '꧐' .. '꧙' |
    '꧰' .. '꧹' |
    '꩐' .. '꩙' |
    '꯰' .. '꯹' |
    '０' .. '９' |
    '𐒠' .. '𐒩' |
    '𐴰' .. '𐴹' |
    '𑃰' .. '𑃹' |
    '𑇐' .. '𑇙' |
    '𑋰' .. '𑋹' |
    '𑓐' .. '𑓙' |
    '𑛀' .. '𑛉' |
    '𑣠' .. '𑣩' |
    '𑱐' .. '𑱙' |
    '𑵐' .. '𑵙' |
    '𑶠' .. '𑶩' |
    '𖩠' .. '𖩩' |
    '𖭐' .. '𖭙' |
    '𝟎' .. '𝟏' |
    '𝟐' .. '𝟟' |
    '𝟠' .. '𝟯' |
    '𝟰' .. '𝟿' |
    '𞥐' .. '𞥙'
}