whitespace = _{WhiteSpace}
comments = {SingleLineComment | MultiLineComment}

InputElementDiv = {
    WhiteSpace |
    LineTerminator |
    Comment |
    Token |
    DivPunctuator
}

DivPunctuator = {
    "/" |
    "/="
}

InputElementRegExp = {
    WhiteSpace |
    LineTerminator |
    Comment |
    Token |
    RegularExpressionLiteral
}

ControlCharacters = {
    "\u{200C}" |
    "\u{200D}" |
    "\u{FEFF}"
}

WhiteSpace = {
    "\u{0009}" |
    "\u{000B}" |
    "\u{000C}" |
    "\u{0020}" |
    "\u{00A0}" |
    "\u{FEFF}"
}

lf = {"\u{000A}"}
cr = {"\u{000D}"}
ls = {"\u{2028}"}
ps = {"\u{2029}"}

LineTerminator = {
    lf |
    cr |
    ls |
    ps
}

LineTerminatorSequence = {
    lf |
    cr ~ !(lf) |
    ls |
    ps |
    cr ~ lf
}


Comment = {
    MultiLineComment |
    SingleLineComment
}

MultiLineComment  = {
 "/*" ~ MultiLineCommentChars* ~ "*/"
}
MultiLineCommentChars = {
    MultiLineNotAsteriskChar ~ MultiLineCommentChars* |
    "*" ~ PostAsteriskCommentChars*
}
PostAsteriskCommentChars = {
    MultiLineNotForwardSlashOrAsteriskChar ~ MultiLineCommentChars* |
    "*" ~ PostAsteriskCommentChars*
}
MultiLineNotAsteriskChar = {
    !("*") ~
    SourceCharacter
}
MultiLineNotForwardSlashOrAsteriskChar  = {
    !("/" | "*") ~
    SourceCharacter
}
SingleLineComment = {
    "//" ~ SingleLineCommentChar*
}

SingleLineCommentChars = {
    SingleLineCommentChar ~ SingleLineCommentChar*
}

SingleLineCommentChar = {
    !(LineTerminator) ~
    SourceCharacter
}


Token = {
    IdentifierName |
    Punctuator |
    NumericLiteral |
    StringLiteral
}

Identifier = {
    !(ReservedWord) ~
    IdentifierName
}
IdentifierName  = {
    IdentifierStart ~ IdentifierPart*
}
IdentifierStart  = {
    UnicodeLetter |
    "$" |
    "_" |
    "\\" ~ UnicodeEscapeSequence
}
IdentifierPart  = {
    IdentifierStart |
    UnicodeCombiningMark |
    UnicodeDigit |
    UnicodeConnectorPunctuation |
    "\u{200C}" |
    "\u{200D}"
}
UnicodeLetter  = {
    SourceCharacter //any character in the Unicode categories “Uppercase letter (Lu)”, “Lowercase letter (Ll)”, “Titlecase letter (Lt)”, “Modifier letter (Lm)”, “Other letter (Lo)”, or “Letter number (Nl)”.
}
UnicodeCombiningMark  = {
    SourceCharacter //any character in the Unicode categories “Non-spacing mark (Mn)” or “Combining spacing mark (Mc)”
}
UnicodeDigit  = {
    SourceCharacter //any character in the Unicode category “Decimal number (Nd)”
}
UnicodeConnectorPunctuation  = {
    SourceCharacter //any character in the Unicode category “Connector punctuation (Pc)”
}


ReservedWord = {
    Keyword |
    FutureReservedWord |
    NullLiteral |
    BooleanLiteral
}

Keyword = {
    "break" |
    "do" |
    "instanceof" |
    "typeof" |
    "case" |
    "else" |
    "new" |
    "var" |
    "catch" |
    "finally" |
    "return" |
    "void" |
    "continue" |
    "for" |
    "switch" |
    "while" |
    "debugger" |
    "function" |
    "this" |
    "with" |
    "default" |
    "if" |
    "throw" |
    "delete" |
    "in" |
    "try"
}

FutureReservedWord = {
    "class" |
    "enum" |
    "extends" |
    "super" |
    "const" |
    "export" |
    "import"
}

Punctuator = {
    "{"    |
    "}"    |
    "("    |
    ")"    |
    "["    |
    "]"    |
    "."    |
    ";"    |
    ","    |
    "<"    |
    ">"    |
    "<="   |
    ">="   |
    "=="   |
    "!="   |
    "==="  |
    "!=="  |
    "+"    |
    "-"    |
    "*"    |
    "%"    |
    "++"   |
    "--"   |
    "<<"   |
    ">>"   |
    ">>>"  |
    "&"    |
    "|"    |
    "^"    |
    "!"    |
    "~"    |
    "&&"   |
    "||"   |
    "?"    |
    ":"    |
    "="    |
    "+="   |
    "-="   |
    "*="   |
    "%="   |
    "<<="  |
    ">>="  |
    ">>>=" |
    "&="   |
    "|="   |
    "^="
}

Literal = {
    NullLiteral |
    BooleanLiteral |
    NumericLiteral |
    StringLiteral |
    RegularExpressionLiteral
}

NullLiteral = { "null" }
BooleanLiteral = { "true" | "false" }
NumericLiteral = {
    DecimalLiteral |
    HexIntegerLiteral
}

DecimalLiteral = {
    DecimalIntegerLiteral ~ "." ~ DecimalDigit* ~ ExponentPart* |
    "." ~ DecimalDigits ~ ExponentPart* |
    DecimalIntegerLiteral ~ ExponentPart*
}

DecimalIntegerLiteral = {
    "0" |
    NonZeroDigit ~ DecimalDigit*
}


DecimalDigits = {
    DecimalDigit ~ DecimalDigits |
    DecimalDigit?
}

DecimalDigit = { '0' .. '9' }
NonZeroDigit = { '1' .. '9' }

ExponentPart = {
    ExponentIndicator ~ SignedInteger
}

ExponentIndicator = { "e" | "E" }
SignedInteger = {
    "+" ~ DecimalDigits |
    "-" ~ DecimalDigits  |
    DecimalDigits
}

HexIntegerLiteral = {
    "0x" ~ HexDigit* |
    "0X" ~ HexDigit*
}

HexDigit = {
    '0' .. '9' | 'A' .. 'F'
}

DoubleQuote = {"\""}
SingleQuote = {"\'"}
StringLiteral = {
    DoubleQuote ~ DoubleStringCharacters* ~ DoubleQuote |
    SingleQuote ~ SingleStringCharacters* ~ SingleQuote
}

DoubleStringCharacters = {
    DoubleStringCharacter ~ DoubleStringCharacter*
}

SingleStringCharacters = {
    SingleStringCharacter ~ SingleStringCharacter*
}

DoubleStringCharacter = {
    (
        !(DoubleQuote | "\\" | LineTerminator) ~
        SourceCharacter) |
    "\\" ~ EscapeSequence |
    LineContinuation
}

SingleStringCharacter = {
    (
        !(SingleQuote | "\\" | LineTerminator) ~
        SourceCharacter) |
    "\\" ~ EscapeSequence |
    LineContinuation
}

LineContinuation = {
    "\\" ~ LineTerminatorSequence
}

EscapeSequence = {
    CharacterEscapeSequence |
    "0" ~ !(DecimalDigit) |
    HexEscapeSequence |
    UnicodeEscapeSequence
}

CharacterEscapeSequence = {
    SingleEscapeCharacter |
    NonEscapeCharacter
}

SingleEscapeCharacter = {
    SingleQuote |
    DoubleQuote |
     "\\" |
     "b" |
     "f" |
     "n" |
     "r" |
     "t" |
     "v"
}

NonEscapeCharacter = {
    !(
        EscapeCharacter |
        LineTerminator
    ) ~
    SourceCharacter //but not one of EscapeCharacter or LineTerminator
}

EscapeCharacter = {
    SingleEscapeCharacter |
    DecimalDigit |
    "x" |
    "u"
}

HexEscapeSequence = {
    "x" ~ HexDigit ~ HexDigit
}

UnicodeEscapeSequence = {
    "u" ~ HexDigit ~ HexDigit ~ HexDigit ~ HexDigit
}

RegularExpressionLiteral = {
    "/" ~ RegularExpressionBody ~ "/" ~ RegularExpressionFlags
}

RegularExpressionBody = {
    RegularExpressionFirstChar ~ RegularExpressionChars
}

RegularExpressionChars = {
    RegularExpressionChar ~ RegularExpressionChars |
    RegularExpressionChar?
}

RegularExpressionFirstChar = {
    (
        !("*" | "\\" | "/" | "[") ~
        RegularExpressionNonTerminator) |// but not one of * or \ or / or [
    RegularExpressionBackslashSequence |
    RegularExpressionClass
}

RegularExpressionChar = {
    (
        !("\\" | "/" | "[") ~
        RegularExpressionNonTerminator
    ) |
    RegularExpressionBackslashSequence |
    RegularExpressionClass
}

RegularExpressionBackslashSequence = {
    "\\" ~ RegularExpressionNonTerminator
}

RegularExpressionNonTerminator = {
    !(
        LineTerminator
    ) ~
    SourceCharacter
}

RegularExpressionClass = {
    RegularExpressionClassChars*
}

RegularExpressionClassChars = {
    RegularExpressionClassChar ~ RegularExpressionClassChars |
    RegularExpressionClassChar?
}

RegularExpressionClassChar = {
    RegularExpressionNonTerminator |// but not one of ] or \
    RegularExpressionBackslashSequence
}

RegularExpressionFlags = {
    (IdentifierPart ~ RegularExpressionFlags) |
    IdentifierPart?
}

SourceCharacter = {
    '\u{00}'..'\u{10FFFF}'
}