
running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out


running 3 tests
matched "[]" to ArrayLiteral
pair: Pairs { pairs: [Pair { rule: ArrayLiteral, span: Span { start: 0, end: 2 }, inner: Pairs { pairs: [] } }] }
matched "0" to NumericLiteral
pair: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 0, end: 1 }, inner: Pairs { pairs: [] } }] }
matched "0.1" to NumericLiteral
pair: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 0, end: 3 }, inner: Pairs { pairs: [] } }] }
matched "1.1" to NumericLiteral
pair: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 0, end: 3 }, inner: Pairs { pairs: [] } }] }
matched "1.667e99" to NumericLiteral
pair: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 0, end: 8 }, inner: Pairs { pairs: [] } }] }
matched "1.556E9" to NumericLiteral
pair: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 0, end: 7 }, inner: Pairs { pairs: [] } }] }
matched "[1]" to ArrayLiteral
pair: Pairs { pairs: [Pair { rule: ArrayLiteral, span: Span { start: 0, end: 3 }, inner: Pairs { pairs: [Pair { rule: ElementList, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: AssignmentExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] }
test literals::numeric_literals ... ok
matched "x: 1" to PropertyAssignment
pair: Pairs { pairs: [Pair { rule: PropertyAssignment, span: Span { start: 0, end: 4 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 0, end: 1 }, inner: Pairs { pairs: [Pair { rule: IdentifierName, span: Span { start: 0, end: 1 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] }
matched "[\'two\', \'three\']" to ArrayLiteral
pair: Pairs { pairs: [Pair { rule: ArrayLiteral, span: Span { start: 0, end: 16 }, inner: Pairs { pairs: [Pair { rule: ElementList, span: Span { start: 1, end: 15 }, inner: Pairs { pairs: [Pair { rule: AssignmentExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: StringLiteral, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: StringLiteral, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] }
matched "\'y\': 12" to PropertyAssignment
pair: Pairs { pairs: [Pair { rule: PropertyAssignment, span: Span { start: 0, end: 7 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 0, end: 3 }, inner: Pairs { pairs: [Pair { rule: StringLiteral, span: Span { start: 0, end: 3 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 5, end: 7 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] }
matched "\"x\": \"y\"" to PropertyAssignment
pair: Pairs { pairs: [Pair { rule: PropertyAssignment, span: Span { start: 0, end: 8 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 0, end: 3 }, inner: Pairs { pairs: [Pair { rule: StringLiteral, span: Span { start: 0, end: 3 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [Pair { rule: StringLiteral, span: Span { start: 5, end: 8 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] }
matched "z: 0," to PropertyAssignment
pair: Pairs { pairs: [Pair { rule: PropertyAssignment, span: Span { start: 0, end: 4 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 0, end: 1 }, inner: Pairs { pairs: [Pair { rule: IdentifierName, span: Span { start: 0, end: 1 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] }
test literals::array_literal ... ok
matched "get x() { return this._x }" to PropertyGetter
pair: Pairs { pairs: [Pair { rule: PropertyGetter, span: Span { start: 0, end: 26 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: IdentifierName, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: FunctionBody, span: Span { start: 10, end: 25 }, inner: Pairs { pairs: [] } }] } }] }
matched "x: \'thing\'" to PropertyNameAndValueList
pair: Pairs { pairs: [Pair { rule: PropertyNameAndValueList, span: Span { start: 0, end: 10 }, inner: Pairs { pairs: [Pair { rule: PropertyAssignment, span: Span { start: 0, end: 10 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 0, end: 1 }, inner: Pairs { pairs: [Pair { rule: IdentifierName, span: Span { start: 0, end: 1 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [Pair { rule: StringLiteral, span: Span { start: 3, end: 10 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] }
matched "y: \"y\", z: \"z\"" to PropertyNameAndValueList
pair: Pairs { pairs: [Pair { rule: PropertyNameAndValueList, span: Span { start: 0, end: 14 }, inner: Pairs { pairs: [Pair { rule: PropertyAssignment, span: Span { start: 0, end: 6 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 0, end: 1 }, inner: Pairs { pairs: [Pair { rule: IdentifierName, span: Span { start: 0, end: 1 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [Pair { rule: StringLiteral, span: Span { start: 3, end: 6 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }, Pair { rule: PropertyAssignment, span: Span { start: 8, end: 14 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 8, end: 9 }, inner: Pairs { pairs: [Pair { rule: IdentifierName, span: Span { start: 8, end: 9 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [Pair { rule: StringLiteral, span: Span { start: 11, end: 14 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] }
matched "1: 2, 3: 4," to PropertyNameAndValueList
pair: Pairs { pairs: [Pair { rule: PropertyNameAndValueList, span: Span { start: 0, end: 10 }, inner: Pairs { pairs: [Pair { rule: PropertyAssignment, span: Span { start: 0, end: 4 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 0, end: 1 }, inner: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 0, end: 1 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 3, end: 4 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }, Pair { rule: PropertyAssignment, span: Span { start: 6, end: 10 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 6, end: 7 }, inner: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 6, end: 7 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 9, end: 10 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] }
matched "{}" to ObjectLiteral
pair: Pairs { pairs: [Pair { rule: ObjectLiteral, span: Span { start: 0, end: 2 }, inner: Pairs { pairs: [] } }] }
matched "{1: 2, 3: 4}" to ObjectLiteral
pair: Pairs { pairs: [Pair { rule: ObjectLiteral, span: Span { start: 0, end: 12 }, inner: Pairs { pairs: [Pair { rule: PropertyNameAndValueList, span: Span { start: 1, end: 11 }, inner: Pairs { pairs: [Pair { rule: PropertyAssignment, span: Span { start: 1, end: 5 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 4, end: 5 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }, Pair { rule: PropertyAssignment, span: Span { start: 7, end: 11 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 7, end: 8 }, inner: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 7, end: 8 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [Pair { rule: NumericLiteral, span: Span { start: 10, end: 11 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] }
matched "{thing: \'stuff\', people: \'places\'}" to ObjectLiteral
pair: Pairs { pairs: [Pair { rule: ObjectLiteral, span: Span { start: 0, end: 34 }, inner: Pairs { pairs: [Pair { rule: PropertyNameAndValueList, span: Span { start: 1, end: 33 }, inner: Pairs { pairs: [Pair { rule: PropertyAssignment, span: Span { start: 1, end: 15 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [Pair { rule: IdentifierName, span: Span { start: 1, end: 6 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [Pair { rule: StringLiteral, span: Span { start: 8, end: 15 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }, Pair { rule: PropertyAssignment, span: Span { start: 17, end: 33 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 17, end: 23 }, inner: Pairs { pairs: [Pair { rule: IdentifierName, span: Span { start: 17, end: 23 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: Literal, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [Pair { rule: StringLiteral, span: Span { start: 25, end: 33 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] }
matched "{a: thing, b: otherThing}" to ObjectLiteral
pair: Pairs { pairs: [Pair { rule: ObjectLiteral, span: Span { start: 0, end: 25 }, inner: Pairs { pairs: [Pair { rule: PropertyNameAndValueList, span: Span { start: 1, end: 24 }, inner: Pairs { pairs: [Pair { rule: PropertyAssignment, span: Span { start: 1, end: 9 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [Pair { rule: IdentifierName, span: Span { start: 1, end: 2 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [Pair { rule: Identifier, span: Span { start: 4, end: 9 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }, Pair { rule: PropertyAssignment, span: Span { start: 11, end: 24 }, inner: Pairs { pairs: [Pair { rule: PropertyName, span: Span { start: 11, end: 12 }, inner: Pairs { pairs: [Pair { rule: IdentifierName, span: Span { start: 11, end: 12 }, inner: Pairs { pairs: [] } }] } }, Pair { rule: AssignmentExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: ConditionalExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: LogicalOrExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: LogicalAndExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: BitwiseOrExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: BitwiseXOrExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: BitwiseAndExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: EqualityExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: RelationalExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: ShiftExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: AdditiveExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: MultiplicativeExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: UnaryExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: PostfixExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: LeftHandSideExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: NewExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: MemberExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: PrimaryExpression, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [Pair { rule: Identifier, span: Span { start: 14, end: 24 }, inner: Pairs { pairs: [] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] } }] }
test literals::object_literal ... ok

test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 4 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out

